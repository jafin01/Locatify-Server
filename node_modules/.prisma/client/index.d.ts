
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: string
  mobileNo: string
  firstName: string
  lastName: string
  email: string
  hashedPassword: string
  hashedRefreshToken: string | null
  createdAt: Date
  updatedAt: Date
  lastSeen: Date
}

/**
 * Model Location
 * 
 */
export type Location = {
  id: string
  latitude: number
  longitude: number
  userId: string
  circleId: string
}

/**
 * Model Places
 * 
 */
export type Places = {
  id: string
  name: string
  latitude: number
  longitude: number
  userId: string
  circleId: string
}

/**
 * Model Circle
 * 
 */
export type Circle = {
  id: string
  circleCode: string
  codeExpiresAt: Date
  title: string
  description: string | null
  createdUserId: string
}

/**
 * Model CircleMembers
 * 
 */
export type CircleMembers = {
  id: string
  userId: string
  circleId: string
  role: string | null
}

/**
 * Model Devices
 * 
 */
export type Devices = {
  id: string
  userId: string
  device_type: string
  device_version: string
  app_version: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<GlobalReject>;

  /**
   * `prisma.places`: Exposes CRUD operations for the **Places** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Places
    * const places = await prisma.places.findMany()
    * ```
    */
  get places(): Prisma.PlacesDelegate<GlobalReject>;

  /**
   * `prisma.circle`: Exposes CRUD operations for the **Circle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Circles
    * const circles = await prisma.circle.findMany()
    * ```
    */
  get circle(): Prisma.CircleDelegate<GlobalReject>;

  /**
   * `prisma.circleMembers`: Exposes CRUD operations for the **CircleMembers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CircleMembers
    * const circleMembers = await prisma.circleMembers.findMany()
    * ```
    */
  get circleMembers(): Prisma.CircleMembersDelegate<GlobalReject>;

  /**
   * `prisma.devices`: Exposes CRUD operations for the **Devices** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devices
    * const devices = await prisma.devices.findMany()
    * ```
    */
  get devices(): Prisma.DevicesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Location: 'Location',
    Places: 'Places',
    Circle: 'Circle',
    CircleMembers: 'CircleMembers',
    Devices: 'Devices'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    circle: number
    circleMembers: number
    devices: number
    location: number
    places: number
  }

  export type UserCountOutputTypeSelect = {
    circle?: boolean
    circleMembers?: boolean
    devices?: boolean
    location?: boolean
    places?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type CircleCountOutputType
   */


  export type CircleCountOutputType = {
    circleMembers: number
    location: number
    places: number
  }

  export type CircleCountOutputTypeSelect = {
    circleMembers?: boolean
    location?: boolean
    places?: boolean
  }

  export type CircleCountOutputTypeGetPayload<S extends boolean | null | undefined | CircleCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CircleCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CircleCountOutputTypeArgs)
    ? CircleCountOutputType 
    : S extends { select: any } & (CircleCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CircleCountOutputType ? CircleCountOutputType[P] : never
  } 
      : CircleCountOutputType




  // Custom InputTypes

  /**
   * CircleCountOutputType without action
   */
  export type CircleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CircleCountOutputType
     */
    select?: CircleCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    mobileNo: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    hashedPassword: string | null
    hashedRefreshToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastSeen: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    mobileNo: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    hashedPassword: string | null
    hashedRefreshToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastSeen: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    mobileNo: number
    firstName: number
    lastName: number
    email: number
    hashedPassword: number
    hashedRefreshToken: number
    createdAt: number
    updatedAt: number
    lastSeen: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    mobileNo?: true
    firstName?: true
    lastName?: true
    email?: true
    hashedPassword?: true
    hashedRefreshToken?: true
    createdAt?: true
    updatedAt?: true
    lastSeen?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    mobileNo?: true
    firstName?: true
    lastName?: true
    email?: true
    hashedPassword?: true
    hashedRefreshToken?: true
    createdAt?: true
    updatedAt?: true
    lastSeen?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    mobileNo?: true
    firstName?: true
    lastName?: true
    email?: true
    hashedPassword?: true
    hashedRefreshToken?: true
    createdAt?: true
    updatedAt?: true
    lastSeen?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken: string | null
    createdAt: Date
    updatedAt: Date
    lastSeen: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    mobileNo?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    hashedPassword?: boolean
    hashedRefreshToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastSeen?: boolean
    circle?: boolean | User$circleArgs
    circleMembers?: boolean | User$circleMembersArgs
    devices?: boolean | User$devicesArgs
    location?: boolean | User$locationArgs
    places?: boolean | User$placesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    circle?: boolean | User$circleArgs
    circleMembers?: boolean | User$circleMembersArgs
    devices?: boolean | User$devicesArgs
    location?: boolean | User$locationArgs
    places?: boolean | User$placesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'circle' ? Array < CircleGetPayload<S['include'][P]>>  :
        P extends 'circleMembers' ? Array < CircleMembersGetPayload<S['include'][P]>>  :
        P extends 'devices' ? Array < DevicesGetPayload<S['include'][P]>>  :
        P extends 'location' ? Array < LocationGetPayload<S['include'][P]>>  :
        P extends 'places' ? Array < PlacesGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'circle' ? Array < CircleGetPayload<S['select'][P]>>  :
        P extends 'circleMembers' ? Array < CircleMembersGetPayload<S['select'][P]>>  :
        P extends 'devices' ? Array < DevicesGetPayload<S['select'][P]>>  :
        P extends 'location' ? Array < LocationGetPayload<S['select'][P]>>  :
        P extends 'places' ? Array < PlacesGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    circle<T extends User$circleArgs= {}>(args?: Subset<T, User$circleArgs>): Prisma.PrismaPromise<Array<CircleGetPayload<T>>| Null>;

    circleMembers<T extends User$circleMembersArgs= {}>(args?: Subset<T, User$circleMembersArgs>): Prisma.PrismaPromise<Array<CircleMembersGetPayload<T>>| Null>;

    devices<T extends User$devicesArgs= {}>(args?: Subset<T, User$devicesArgs>): Prisma.PrismaPromise<Array<DevicesGetPayload<T>>| Null>;

    location<T extends User$locationArgs= {}>(args?: Subset<T, User$locationArgs>): Prisma.PrismaPromise<Array<LocationGetPayload<T>>| Null>;

    places<T extends User$placesArgs= {}>(args?: Subset<T, User$placesArgs>): Prisma.PrismaPromise<Array<PlacesGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.circle
   */
  export type User$circleArgs = {
    /**
     * Select specific fields to fetch from the Circle
     */
    select?: CircleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleInclude | null
    where?: CircleWhereInput
    orderBy?: Enumerable<CircleOrderByWithRelationInput>
    cursor?: CircleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CircleScalarFieldEnum>
  }


  /**
   * User.circleMembers
   */
  export type User$circleMembersArgs = {
    /**
     * Select specific fields to fetch from the CircleMembers
     */
    select?: CircleMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleMembersInclude | null
    where?: CircleMembersWhereInput
    orderBy?: Enumerable<CircleMembersOrderByWithRelationInput>
    cursor?: CircleMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CircleMembersScalarFieldEnum>
  }


  /**
   * User.devices
   */
  export type User$devicesArgs = {
    /**
     * Select specific fields to fetch from the Devices
     */
    select?: DevicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevicesInclude | null
    where?: DevicesWhereInput
    orderBy?: Enumerable<DevicesOrderByWithRelationInput>
    cursor?: DevicesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DevicesScalarFieldEnum>
  }


  /**
   * User.location
   */
  export type User$locationArgs = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude | null
    where?: LocationWhereInput
    orderBy?: Enumerable<LocationOrderByWithRelationInput>
    cursor?: LocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LocationScalarFieldEnum>
  }


  /**
   * User.places
   */
  export type User$placesArgs = {
    /**
     * Select specific fields to fetch from the Places
     */
    select?: PlacesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlacesInclude | null
    where?: PlacesWhereInput
    orderBy?: Enumerable<PlacesOrderByWithRelationInput>
    cursor?: PlacesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PlacesScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Location
   */


  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type LocationSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    latitude: number | null
    longitude: number | null
    userId: string | null
    circleId: string | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    latitude: number | null
    longitude: number | null
    userId: string | null
    circleId: string | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    latitude: number
    longitude: number
    userId: number
    circleId: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type LocationSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    userId?: true
    circleId?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    userId?: true
    circleId?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    userId?: true
    circleId?: true
    _all?: true
  }

  export type LocationAggregateArgs = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: Enumerable<LocationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs = {
    where?: LocationWhereInput
    orderBy?: Enumerable<LocationOrderByWithAggregationInput>
    by: LocationScalarFieldEnum[]
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }


  export type LocationGroupByOutputType = {
    id: string
    latitude: number
    longitude: number
    userId: string
    circleId: string
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect = {
    id?: boolean
    latitude?: boolean
    longitude?: boolean
    userId?: boolean
    circleId?: boolean
    circle?: boolean | CircleArgs
    user?: boolean | UserArgs
  }


  export type LocationInclude = {
    circle?: boolean | CircleArgs
    user?: boolean | UserArgs
  }

  export type LocationGetPayload<S extends boolean | null | undefined | LocationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Location :
    S extends undefined ? never :
    S extends { include: any } & (LocationArgs | LocationFindManyArgs)
    ? Location  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'circle' ? CircleGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LocationArgs | LocationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'circle' ? CircleGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Location ? Location[P] : never
  } 
      : Location


  type LocationCountArgs = 
    Omit<LocationFindManyArgs, 'select' | 'include'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LocationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LocationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Location'> extends True ? Prisma__LocationClient<LocationGetPayload<T>> : Prisma__LocationClient<LocationGetPayload<T> | null, null>

    /**
     * Find one Location that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LocationFindUniqueOrThrowArgs>
    ): Prisma__LocationClient<LocationGetPayload<T>>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LocationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LocationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Location'> extends True ? Prisma__LocationClient<LocationGetPayload<T>> : Prisma__LocationClient<LocationGetPayload<T> | null, null>

    /**
     * Find the first Location that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LocationFindFirstOrThrowArgs>
    ): Prisma__LocationClient<LocationGetPayload<T>>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LocationFindManyArgs>(
      args?: SelectSubset<T, LocationFindManyArgs>
    ): Prisma.PrismaPromise<Array<LocationGetPayload<T>>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
    **/
    create<T extends LocationCreateArgs>(
      args: SelectSubset<T, LocationCreateArgs>
    ): Prisma__LocationClient<LocationGetPayload<T>>

    /**
     * Create many Locations.
     *     @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     *     @example
     *     // Create many Locations
     *     const location = await prisma.location.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LocationCreateManyArgs>(
      args?: SelectSubset<T, LocationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
    **/
    delete<T extends LocationDeleteArgs>(
      args: SelectSubset<T, LocationDeleteArgs>
    ): Prisma__LocationClient<LocationGetPayload<T>>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LocationUpdateArgs>(
      args: SelectSubset<T, LocationUpdateArgs>
    ): Prisma__LocationClient<LocationGetPayload<T>>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LocationDeleteManyArgs>(
      args?: SelectSubset<T, LocationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LocationUpdateManyArgs>(
      args: SelectSubset<T, LocationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
    **/
    upsert<T extends LocationUpsertArgs>(
      args: SelectSubset<T, LocationUpsertArgs>
    ): Prisma__LocationClient<LocationGetPayload<T>>

    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LocationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    circle<T extends CircleArgs= {}>(args?: Subset<T, CircleArgs>): Prisma__CircleClient<CircleGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Location base type for findUnique actions
   */
  export type LocationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUnique
   */
  export interface LocationFindUniqueArgs extends LocationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location base type for findFirst actions
   */
  export type LocationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: Enumerable<LocationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: Enumerable<LocationScalarFieldEnum>
  }

  /**
   * Location findFirst
   */
  export interface LocationFindFirstArgs extends LocationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: Enumerable<LocationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: Enumerable<LocationScalarFieldEnum>
  }


  /**
   * Location findMany
   */
  export type LocationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: Enumerable<LocationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: Enumerable<LocationScalarFieldEnum>
  }


  /**
   * Location create
   */
  export type LocationCreateArgs = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }


  /**
   * Location createMany
   */
  export type LocationCreateManyArgs = {
    /**
     * The data used to create many Locations.
     */
    data: Enumerable<LocationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Location update
   */
  export type LocationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
  }


  /**
   * Location upsert
   */
  export type LocationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }


  /**
   * Location delete
   */
  export type LocationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
  }


  /**
   * Location without action
   */
  export type LocationArgs = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude | null
  }



  /**
   * Model Places
   */


  export type AggregatePlaces = {
    _count: PlacesCountAggregateOutputType | null
    _avg: PlacesAvgAggregateOutputType | null
    _sum: PlacesSumAggregateOutputType | null
    _min: PlacesMinAggregateOutputType | null
    _max: PlacesMaxAggregateOutputType | null
  }

  export type PlacesAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type PlacesSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type PlacesMinAggregateOutputType = {
    id: string | null
    name: string | null
    latitude: number | null
    longitude: number | null
    userId: string | null
    circleId: string | null
  }

  export type PlacesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    latitude: number | null
    longitude: number | null
    userId: string | null
    circleId: string | null
  }

  export type PlacesCountAggregateOutputType = {
    id: number
    name: number
    latitude: number
    longitude: number
    userId: number
    circleId: number
    _all: number
  }


  export type PlacesAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type PlacesSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type PlacesMinAggregateInputType = {
    id?: true
    name?: true
    latitude?: true
    longitude?: true
    userId?: true
    circleId?: true
  }

  export type PlacesMaxAggregateInputType = {
    id?: true
    name?: true
    latitude?: true
    longitude?: true
    userId?: true
    circleId?: true
  }

  export type PlacesCountAggregateInputType = {
    id?: true
    name?: true
    latitude?: true
    longitude?: true
    userId?: true
    circleId?: true
    _all?: true
  }

  export type PlacesAggregateArgs = {
    /**
     * Filter which Places to aggregate.
     */
    where?: PlacesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Places to fetch.
     */
    orderBy?: Enumerable<PlacesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlacesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Places.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Places
    **/
    _count?: true | PlacesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlacesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlacesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlacesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlacesMaxAggregateInputType
  }

  export type GetPlacesAggregateType<T extends PlacesAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaces]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaces[P]>
      : GetScalarType<T[P], AggregatePlaces[P]>
  }




  export type PlacesGroupByArgs = {
    where?: PlacesWhereInput
    orderBy?: Enumerable<PlacesOrderByWithAggregationInput>
    by: PlacesScalarFieldEnum[]
    having?: PlacesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlacesCountAggregateInputType | true
    _avg?: PlacesAvgAggregateInputType
    _sum?: PlacesSumAggregateInputType
    _min?: PlacesMinAggregateInputType
    _max?: PlacesMaxAggregateInputType
  }


  export type PlacesGroupByOutputType = {
    id: string
    name: string
    latitude: number
    longitude: number
    userId: string
    circleId: string
    _count: PlacesCountAggregateOutputType | null
    _avg: PlacesAvgAggregateOutputType | null
    _sum: PlacesSumAggregateOutputType | null
    _min: PlacesMinAggregateOutputType | null
    _max: PlacesMaxAggregateOutputType | null
  }

  type GetPlacesGroupByPayload<T extends PlacesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PlacesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlacesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlacesGroupByOutputType[P]>
            : GetScalarType<T[P], PlacesGroupByOutputType[P]>
        }
      >
    >


  export type PlacesSelect = {
    id?: boolean
    name?: boolean
    latitude?: boolean
    longitude?: boolean
    userId?: boolean
    circleId?: boolean
    circle?: boolean | CircleArgs
    user?: boolean | UserArgs
  }


  export type PlacesInclude = {
    circle?: boolean | CircleArgs
    user?: boolean | UserArgs
  }

  export type PlacesGetPayload<S extends boolean | null | undefined | PlacesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Places :
    S extends undefined ? never :
    S extends { include: any } & (PlacesArgs | PlacesFindManyArgs)
    ? Places  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'circle' ? CircleGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PlacesArgs | PlacesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'circle' ? CircleGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Places ? Places[P] : never
  } 
      : Places


  type PlacesCountArgs = 
    Omit<PlacesFindManyArgs, 'select' | 'include'> & {
      select?: PlacesCountAggregateInputType | true
    }

  export interface PlacesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Places that matches the filter.
     * @param {PlacesFindUniqueArgs} args - Arguments to find a Places
     * @example
     * // Get one Places
     * const places = await prisma.places.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlacesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PlacesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Places'> extends True ? Prisma__PlacesClient<PlacesGetPayload<T>> : Prisma__PlacesClient<PlacesGetPayload<T> | null, null>

    /**
     * Find one Places that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlacesFindUniqueOrThrowArgs} args - Arguments to find a Places
     * @example
     * // Get one Places
     * const places = await prisma.places.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlacesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PlacesFindUniqueOrThrowArgs>
    ): Prisma__PlacesClient<PlacesGetPayload<T>>

    /**
     * Find the first Places that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacesFindFirstArgs} args - Arguments to find a Places
     * @example
     * // Get one Places
     * const places = await prisma.places.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlacesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PlacesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Places'> extends True ? Prisma__PlacesClient<PlacesGetPayload<T>> : Prisma__PlacesClient<PlacesGetPayload<T> | null, null>

    /**
     * Find the first Places that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacesFindFirstOrThrowArgs} args - Arguments to find a Places
     * @example
     * // Get one Places
     * const places = await prisma.places.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlacesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PlacesFindFirstOrThrowArgs>
    ): Prisma__PlacesClient<PlacesGetPayload<T>>

    /**
     * Find zero or more Places that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Places
     * const places = await prisma.places.findMany()
     * 
     * // Get first 10 Places
     * const places = await prisma.places.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const placesWithIdOnly = await prisma.places.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlacesFindManyArgs>(
      args?: SelectSubset<T, PlacesFindManyArgs>
    ): Prisma.PrismaPromise<Array<PlacesGetPayload<T>>>

    /**
     * Create a Places.
     * @param {PlacesCreateArgs} args - Arguments to create a Places.
     * @example
     * // Create one Places
     * const Places = await prisma.places.create({
     *   data: {
     *     // ... data to create a Places
     *   }
     * })
     * 
    **/
    create<T extends PlacesCreateArgs>(
      args: SelectSubset<T, PlacesCreateArgs>
    ): Prisma__PlacesClient<PlacesGetPayload<T>>

    /**
     * Create many Places.
     *     @param {PlacesCreateManyArgs} args - Arguments to create many Places.
     *     @example
     *     // Create many Places
     *     const places = await prisma.places.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlacesCreateManyArgs>(
      args?: SelectSubset<T, PlacesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Places.
     * @param {PlacesDeleteArgs} args - Arguments to delete one Places.
     * @example
     * // Delete one Places
     * const Places = await prisma.places.delete({
     *   where: {
     *     // ... filter to delete one Places
     *   }
     * })
     * 
    **/
    delete<T extends PlacesDeleteArgs>(
      args: SelectSubset<T, PlacesDeleteArgs>
    ): Prisma__PlacesClient<PlacesGetPayload<T>>

    /**
     * Update one Places.
     * @param {PlacesUpdateArgs} args - Arguments to update one Places.
     * @example
     * // Update one Places
     * const places = await prisma.places.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlacesUpdateArgs>(
      args: SelectSubset<T, PlacesUpdateArgs>
    ): Prisma__PlacesClient<PlacesGetPayload<T>>

    /**
     * Delete zero or more Places.
     * @param {PlacesDeleteManyArgs} args - Arguments to filter Places to delete.
     * @example
     * // Delete a few Places
     * const { count } = await prisma.places.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlacesDeleteManyArgs>(
      args?: SelectSubset<T, PlacesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Places
     * const places = await prisma.places.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlacesUpdateManyArgs>(
      args: SelectSubset<T, PlacesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Places.
     * @param {PlacesUpsertArgs} args - Arguments to update or create a Places.
     * @example
     * // Update or create a Places
     * const places = await prisma.places.upsert({
     *   create: {
     *     // ... data to create a Places
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Places we want to update
     *   }
     * })
    **/
    upsert<T extends PlacesUpsertArgs>(
      args: SelectSubset<T, PlacesUpsertArgs>
    ): Prisma__PlacesClient<PlacesGetPayload<T>>

    /**
     * Count the number of Places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacesCountArgs} args - Arguments to filter Places to count.
     * @example
     * // Count the number of Places
     * const count = await prisma.places.count({
     *   where: {
     *     // ... the filter for the Places we want to count
     *   }
     * })
    **/
    count<T extends PlacesCountArgs>(
      args?: Subset<T, PlacesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlacesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlacesAggregateArgs>(args: Subset<T, PlacesAggregateArgs>): Prisma.PrismaPromise<GetPlacesAggregateType<T>>

    /**
     * Group by Places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlacesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlacesGroupByArgs['orderBy'] }
        : { orderBy?: PlacesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlacesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlacesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Places.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PlacesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    circle<T extends CircleArgs= {}>(args?: Subset<T, CircleArgs>): Prisma__CircleClient<CircleGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Places base type for findUnique actions
   */
  export type PlacesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Places
     */
    select?: PlacesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlacesInclude | null
    /**
     * Filter, which Places to fetch.
     */
    where: PlacesWhereUniqueInput
  }

  /**
   * Places findUnique
   */
  export interface PlacesFindUniqueArgs extends PlacesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Places findUniqueOrThrow
   */
  export type PlacesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Places
     */
    select?: PlacesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlacesInclude | null
    /**
     * Filter, which Places to fetch.
     */
    where: PlacesWhereUniqueInput
  }


  /**
   * Places base type for findFirst actions
   */
  export type PlacesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Places
     */
    select?: PlacesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlacesInclude | null
    /**
     * Filter, which Places to fetch.
     */
    where?: PlacesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Places to fetch.
     */
    orderBy?: Enumerable<PlacesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Places.
     */
    cursor?: PlacesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Places.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Places.
     */
    distinct?: Enumerable<PlacesScalarFieldEnum>
  }

  /**
   * Places findFirst
   */
  export interface PlacesFindFirstArgs extends PlacesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Places findFirstOrThrow
   */
  export type PlacesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Places
     */
    select?: PlacesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlacesInclude | null
    /**
     * Filter, which Places to fetch.
     */
    where?: PlacesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Places to fetch.
     */
    orderBy?: Enumerable<PlacesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Places.
     */
    cursor?: PlacesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Places.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Places.
     */
    distinct?: Enumerable<PlacesScalarFieldEnum>
  }


  /**
   * Places findMany
   */
  export type PlacesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Places
     */
    select?: PlacesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlacesInclude | null
    /**
     * Filter, which Places to fetch.
     */
    where?: PlacesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Places to fetch.
     */
    orderBy?: Enumerable<PlacesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Places.
     */
    cursor?: PlacesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Places.
     */
    skip?: number
    distinct?: Enumerable<PlacesScalarFieldEnum>
  }


  /**
   * Places create
   */
  export type PlacesCreateArgs = {
    /**
     * Select specific fields to fetch from the Places
     */
    select?: PlacesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlacesInclude | null
    /**
     * The data needed to create a Places.
     */
    data: XOR<PlacesCreateInput, PlacesUncheckedCreateInput>
  }


  /**
   * Places createMany
   */
  export type PlacesCreateManyArgs = {
    /**
     * The data used to create many Places.
     */
    data: Enumerable<PlacesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Places update
   */
  export type PlacesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Places
     */
    select?: PlacesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlacesInclude | null
    /**
     * The data needed to update a Places.
     */
    data: XOR<PlacesUpdateInput, PlacesUncheckedUpdateInput>
    /**
     * Choose, which Places to update.
     */
    where: PlacesWhereUniqueInput
  }


  /**
   * Places updateMany
   */
  export type PlacesUpdateManyArgs = {
    /**
     * The data used to update Places.
     */
    data: XOR<PlacesUpdateManyMutationInput, PlacesUncheckedUpdateManyInput>
    /**
     * Filter which Places to update
     */
    where?: PlacesWhereInput
  }


  /**
   * Places upsert
   */
  export type PlacesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Places
     */
    select?: PlacesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlacesInclude | null
    /**
     * The filter to search for the Places to update in case it exists.
     */
    where: PlacesWhereUniqueInput
    /**
     * In case the Places found by the `where` argument doesn't exist, create a new Places with this data.
     */
    create: XOR<PlacesCreateInput, PlacesUncheckedCreateInput>
    /**
     * In case the Places was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlacesUpdateInput, PlacesUncheckedUpdateInput>
  }


  /**
   * Places delete
   */
  export type PlacesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Places
     */
    select?: PlacesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlacesInclude | null
    /**
     * Filter which Places to delete.
     */
    where: PlacesWhereUniqueInput
  }


  /**
   * Places deleteMany
   */
  export type PlacesDeleteManyArgs = {
    /**
     * Filter which Places to delete
     */
    where?: PlacesWhereInput
  }


  /**
   * Places without action
   */
  export type PlacesArgs = {
    /**
     * Select specific fields to fetch from the Places
     */
    select?: PlacesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlacesInclude | null
  }



  /**
   * Model Circle
   */


  export type AggregateCircle = {
    _count: CircleCountAggregateOutputType | null
    _min: CircleMinAggregateOutputType | null
    _max: CircleMaxAggregateOutputType | null
  }

  export type CircleMinAggregateOutputType = {
    id: string | null
    circleCode: string | null
    codeExpiresAt: Date | null
    title: string | null
    description: string | null
    createdUserId: string | null
  }

  export type CircleMaxAggregateOutputType = {
    id: string | null
    circleCode: string | null
    codeExpiresAt: Date | null
    title: string | null
    description: string | null
    createdUserId: string | null
  }

  export type CircleCountAggregateOutputType = {
    id: number
    circleCode: number
    codeExpiresAt: number
    title: number
    description: number
    createdUserId: number
    _all: number
  }


  export type CircleMinAggregateInputType = {
    id?: true
    circleCode?: true
    codeExpiresAt?: true
    title?: true
    description?: true
    createdUserId?: true
  }

  export type CircleMaxAggregateInputType = {
    id?: true
    circleCode?: true
    codeExpiresAt?: true
    title?: true
    description?: true
    createdUserId?: true
  }

  export type CircleCountAggregateInputType = {
    id?: true
    circleCode?: true
    codeExpiresAt?: true
    title?: true
    description?: true
    createdUserId?: true
    _all?: true
  }

  export type CircleAggregateArgs = {
    /**
     * Filter which Circle to aggregate.
     */
    where?: CircleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Circles to fetch.
     */
    orderBy?: Enumerable<CircleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CircleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Circles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Circles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Circles
    **/
    _count?: true | CircleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CircleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CircleMaxAggregateInputType
  }

  export type GetCircleAggregateType<T extends CircleAggregateArgs> = {
        [P in keyof T & keyof AggregateCircle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCircle[P]>
      : GetScalarType<T[P], AggregateCircle[P]>
  }




  export type CircleGroupByArgs = {
    where?: CircleWhereInput
    orderBy?: Enumerable<CircleOrderByWithAggregationInput>
    by: CircleScalarFieldEnum[]
    having?: CircleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CircleCountAggregateInputType | true
    _min?: CircleMinAggregateInputType
    _max?: CircleMaxAggregateInputType
  }


  export type CircleGroupByOutputType = {
    id: string
    circleCode: string
    codeExpiresAt: Date
    title: string
    description: string | null
    createdUserId: string
    _count: CircleCountAggregateOutputType | null
    _min: CircleMinAggregateOutputType | null
    _max: CircleMaxAggregateOutputType | null
  }

  type GetCircleGroupByPayload<T extends CircleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CircleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CircleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CircleGroupByOutputType[P]>
            : GetScalarType<T[P], CircleGroupByOutputType[P]>
        }
      >
    >


  export type CircleSelect = {
    id?: boolean
    circleCode?: boolean
    codeExpiresAt?: boolean
    title?: boolean
    description?: boolean
    createdUserId?: boolean
    createdUser?: boolean | UserArgs
    circleMembers?: boolean | Circle$circleMembersArgs
    location?: boolean | Circle$locationArgs
    places?: boolean | Circle$placesArgs
    _count?: boolean | CircleCountOutputTypeArgs
  }


  export type CircleInclude = {
    createdUser?: boolean | UserArgs
    circleMembers?: boolean | Circle$circleMembersArgs
    location?: boolean | Circle$locationArgs
    places?: boolean | Circle$placesArgs
    _count?: boolean | CircleCountOutputTypeArgs
  }

  export type CircleGetPayload<S extends boolean | null | undefined | CircleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Circle :
    S extends undefined ? never :
    S extends { include: any } & (CircleArgs | CircleFindManyArgs)
    ? Circle  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'createdUser' ? UserGetPayload<S['include'][P]> :
        P extends 'circleMembers' ? Array < CircleMembersGetPayload<S['include'][P]>>  :
        P extends 'location' ? Array < LocationGetPayload<S['include'][P]>>  :
        P extends 'places' ? Array < PlacesGetPayload<S['include'][P]>>  :
        P extends '_count' ? CircleCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CircleArgs | CircleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'createdUser' ? UserGetPayload<S['select'][P]> :
        P extends 'circleMembers' ? Array < CircleMembersGetPayload<S['select'][P]>>  :
        P extends 'location' ? Array < LocationGetPayload<S['select'][P]>>  :
        P extends 'places' ? Array < PlacesGetPayload<S['select'][P]>>  :
        P extends '_count' ? CircleCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Circle ? Circle[P] : never
  } 
      : Circle


  type CircleCountArgs = 
    Omit<CircleFindManyArgs, 'select' | 'include'> & {
      select?: CircleCountAggregateInputType | true
    }

  export interface CircleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Circle that matches the filter.
     * @param {CircleFindUniqueArgs} args - Arguments to find a Circle
     * @example
     * // Get one Circle
     * const circle = await prisma.circle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CircleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CircleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Circle'> extends True ? Prisma__CircleClient<CircleGetPayload<T>> : Prisma__CircleClient<CircleGetPayload<T> | null, null>

    /**
     * Find one Circle that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CircleFindUniqueOrThrowArgs} args - Arguments to find a Circle
     * @example
     * // Get one Circle
     * const circle = await prisma.circle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CircleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CircleFindUniqueOrThrowArgs>
    ): Prisma__CircleClient<CircleGetPayload<T>>

    /**
     * Find the first Circle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleFindFirstArgs} args - Arguments to find a Circle
     * @example
     * // Get one Circle
     * const circle = await prisma.circle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CircleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CircleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Circle'> extends True ? Prisma__CircleClient<CircleGetPayload<T>> : Prisma__CircleClient<CircleGetPayload<T> | null, null>

    /**
     * Find the first Circle that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleFindFirstOrThrowArgs} args - Arguments to find a Circle
     * @example
     * // Get one Circle
     * const circle = await prisma.circle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CircleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CircleFindFirstOrThrowArgs>
    ): Prisma__CircleClient<CircleGetPayload<T>>

    /**
     * Find zero or more Circles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Circles
     * const circles = await prisma.circle.findMany()
     * 
     * // Get first 10 Circles
     * const circles = await prisma.circle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const circleWithIdOnly = await prisma.circle.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CircleFindManyArgs>(
      args?: SelectSubset<T, CircleFindManyArgs>
    ): Prisma.PrismaPromise<Array<CircleGetPayload<T>>>

    /**
     * Create a Circle.
     * @param {CircleCreateArgs} args - Arguments to create a Circle.
     * @example
     * // Create one Circle
     * const Circle = await prisma.circle.create({
     *   data: {
     *     // ... data to create a Circle
     *   }
     * })
     * 
    **/
    create<T extends CircleCreateArgs>(
      args: SelectSubset<T, CircleCreateArgs>
    ): Prisma__CircleClient<CircleGetPayload<T>>

    /**
     * Create many Circles.
     *     @param {CircleCreateManyArgs} args - Arguments to create many Circles.
     *     @example
     *     // Create many Circles
     *     const circle = await prisma.circle.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CircleCreateManyArgs>(
      args?: SelectSubset<T, CircleCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Circle.
     * @param {CircleDeleteArgs} args - Arguments to delete one Circle.
     * @example
     * // Delete one Circle
     * const Circle = await prisma.circle.delete({
     *   where: {
     *     // ... filter to delete one Circle
     *   }
     * })
     * 
    **/
    delete<T extends CircleDeleteArgs>(
      args: SelectSubset<T, CircleDeleteArgs>
    ): Prisma__CircleClient<CircleGetPayload<T>>

    /**
     * Update one Circle.
     * @param {CircleUpdateArgs} args - Arguments to update one Circle.
     * @example
     * // Update one Circle
     * const circle = await prisma.circle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CircleUpdateArgs>(
      args: SelectSubset<T, CircleUpdateArgs>
    ): Prisma__CircleClient<CircleGetPayload<T>>

    /**
     * Delete zero or more Circles.
     * @param {CircleDeleteManyArgs} args - Arguments to filter Circles to delete.
     * @example
     * // Delete a few Circles
     * const { count } = await prisma.circle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CircleDeleteManyArgs>(
      args?: SelectSubset<T, CircleDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Circles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Circles
     * const circle = await prisma.circle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CircleUpdateManyArgs>(
      args: SelectSubset<T, CircleUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Circle.
     * @param {CircleUpsertArgs} args - Arguments to update or create a Circle.
     * @example
     * // Update or create a Circle
     * const circle = await prisma.circle.upsert({
     *   create: {
     *     // ... data to create a Circle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Circle we want to update
     *   }
     * })
    **/
    upsert<T extends CircleUpsertArgs>(
      args: SelectSubset<T, CircleUpsertArgs>
    ): Prisma__CircleClient<CircleGetPayload<T>>

    /**
     * Count the number of Circles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleCountArgs} args - Arguments to filter Circles to count.
     * @example
     * // Count the number of Circles
     * const count = await prisma.circle.count({
     *   where: {
     *     // ... the filter for the Circles we want to count
     *   }
     * })
    **/
    count<T extends CircleCountArgs>(
      args?: Subset<T, CircleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CircleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Circle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CircleAggregateArgs>(args: Subset<T, CircleAggregateArgs>): Prisma.PrismaPromise<GetCircleAggregateType<T>>

    /**
     * Group by Circle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CircleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CircleGroupByArgs['orderBy'] }
        : { orderBy?: CircleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CircleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCircleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Circle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CircleClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    createdUser<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    circleMembers<T extends Circle$circleMembersArgs= {}>(args?: Subset<T, Circle$circleMembersArgs>): Prisma.PrismaPromise<Array<CircleMembersGetPayload<T>>| Null>;

    location<T extends Circle$locationArgs= {}>(args?: Subset<T, Circle$locationArgs>): Prisma.PrismaPromise<Array<LocationGetPayload<T>>| Null>;

    places<T extends Circle$placesArgs= {}>(args?: Subset<T, Circle$placesArgs>): Prisma.PrismaPromise<Array<PlacesGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Circle base type for findUnique actions
   */
  export type CircleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Circle
     */
    select?: CircleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleInclude | null
    /**
     * Filter, which Circle to fetch.
     */
    where: CircleWhereUniqueInput
  }

  /**
   * Circle findUnique
   */
  export interface CircleFindUniqueArgs extends CircleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Circle findUniqueOrThrow
   */
  export type CircleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Circle
     */
    select?: CircleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleInclude | null
    /**
     * Filter, which Circle to fetch.
     */
    where: CircleWhereUniqueInput
  }


  /**
   * Circle base type for findFirst actions
   */
  export type CircleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Circle
     */
    select?: CircleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleInclude | null
    /**
     * Filter, which Circle to fetch.
     */
    where?: CircleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Circles to fetch.
     */
    orderBy?: Enumerable<CircleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Circles.
     */
    cursor?: CircleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Circles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Circles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Circles.
     */
    distinct?: Enumerable<CircleScalarFieldEnum>
  }

  /**
   * Circle findFirst
   */
  export interface CircleFindFirstArgs extends CircleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Circle findFirstOrThrow
   */
  export type CircleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Circle
     */
    select?: CircleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleInclude | null
    /**
     * Filter, which Circle to fetch.
     */
    where?: CircleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Circles to fetch.
     */
    orderBy?: Enumerable<CircleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Circles.
     */
    cursor?: CircleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Circles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Circles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Circles.
     */
    distinct?: Enumerable<CircleScalarFieldEnum>
  }


  /**
   * Circle findMany
   */
  export type CircleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Circle
     */
    select?: CircleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleInclude | null
    /**
     * Filter, which Circles to fetch.
     */
    where?: CircleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Circles to fetch.
     */
    orderBy?: Enumerable<CircleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Circles.
     */
    cursor?: CircleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Circles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Circles.
     */
    skip?: number
    distinct?: Enumerable<CircleScalarFieldEnum>
  }


  /**
   * Circle create
   */
  export type CircleCreateArgs = {
    /**
     * Select specific fields to fetch from the Circle
     */
    select?: CircleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleInclude | null
    /**
     * The data needed to create a Circle.
     */
    data: XOR<CircleCreateInput, CircleUncheckedCreateInput>
  }


  /**
   * Circle createMany
   */
  export type CircleCreateManyArgs = {
    /**
     * The data used to create many Circles.
     */
    data: Enumerable<CircleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Circle update
   */
  export type CircleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Circle
     */
    select?: CircleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleInclude | null
    /**
     * The data needed to update a Circle.
     */
    data: XOR<CircleUpdateInput, CircleUncheckedUpdateInput>
    /**
     * Choose, which Circle to update.
     */
    where: CircleWhereUniqueInput
  }


  /**
   * Circle updateMany
   */
  export type CircleUpdateManyArgs = {
    /**
     * The data used to update Circles.
     */
    data: XOR<CircleUpdateManyMutationInput, CircleUncheckedUpdateManyInput>
    /**
     * Filter which Circles to update
     */
    where?: CircleWhereInput
  }


  /**
   * Circle upsert
   */
  export type CircleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Circle
     */
    select?: CircleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleInclude | null
    /**
     * The filter to search for the Circle to update in case it exists.
     */
    where: CircleWhereUniqueInput
    /**
     * In case the Circle found by the `where` argument doesn't exist, create a new Circle with this data.
     */
    create: XOR<CircleCreateInput, CircleUncheckedCreateInput>
    /**
     * In case the Circle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CircleUpdateInput, CircleUncheckedUpdateInput>
  }


  /**
   * Circle delete
   */
  export type CircleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Circle
     */
    select?: CircleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleInclude | null
    /**
     * Filter which Circle to delete.
     */
    where: CircleWhereUniqueInput
  }


  /**
   * Circle deleteMany
   */
  export type CircleDeleteManyArgs = {
    /**
     * Filter which Circles to delete
     */
    where?: CircleWhereInput
  }


  /**
   * Circle.circleMembers
   */
  export type Circle$circleMembersArgs = {
    /**
     * Select specific fields to fetch from the CircleMembers
     */
    select?: CircleMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleMembersInclude | null
    where?: CircleMembersWhereInput
    orderBy?: Enumerable<CircleMembersOrderByWithRelationInput>
    cursor?: CircleMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CircleMembersScalarFieldEnum>
  }


  /**
   * Circle.location
   */
  export type Circle$locationArgs = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude | null
    where?: LocationWhereInput
    orderBy?: Enumerable<LocationOrderByWithRelationInput>
    cursor?: LocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LocationScalarFieldEnum>
  }


  /**
   * Circle.places
   */
  export type Circle$placesArgs = {
    /**
     * Select specific fields to fetch from the Places
     */
    select?: PlacesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlacesInclude | null
    where?: PlacesWhereInput
    orderBy?: Enumerable<PlacesOrderByWithRelationInput>
    cursor?: PlacesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PlacesScalarFieldEnum>
  }


  /**
   * Circle without action
   */
  export type CircleArgs = {
    /**
     * Select specific fields to fetch from the Circle
     */
    select?: CircleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleInclude | null
  }



  /**
   * Model CircleMembers
   */


  export type AggregateCircleMembers = {
    _count: CircleMembersCountAggregateOutputType | null
    _min: CircleMembersMinAggregateOutputType | null
    _max: CircleMembersMaxAggregateOutputType | null
  }

  export type CircleMembersMinAggregateOutputType = {
    id: string | null
    userId: string | null
    circleId: string | null
    role: string | null
  }

  export type CircleMembersMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    circleId: string | null
    role: string | null
  }

  export type CircleMembersCountAggregateOutputType = {
    id: number
    userId: number
    circleId: number
    role: number
    _all: number
  }


  export type CircleMembersMinAggregateInputType = {
    id?: true
    userId?: true
    circleId?: true
    role?: true
  }

  export type CircleMembersMaxAggregateInputType = {
    id?: true
    userId?: true
    circleId?: true
    role?: true
  }

  export type CircleMembersCountAggregateInputType = {
    id?: true
    userId?: true
    circleId?: true
    role?: true
    _all?: true
  }

  export type CircleMembersAggregateArgs = {
    /**
     * Filter which CircleMembers to aggregate.
     */
    where?: CircleMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CircleMembers to fetch.
     */
    orderBy?: Enumerable<CircleMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CircleMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CircleMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CircleMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CircleMembers
    **/
    _count?: true | CircleMembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CircleMembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CircleMembersMaxAggregateInputType
  }

  export type GetCircleMembersAggregateType<T extends CircleMembersAggregateArgs> = {
        [P in keyof T & keyof AggregateCircleMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCircleMembers[P]>
      : GetScalarType<T[P], AggregateCircleMembers[P]>
  }




  export type CircleMembersGroupByArgs = {
    where?: CircleMembersWhereInput
    orderBy?: Enumerable<CircleMembersOrderByWithAggregationInput>
    by: CircleMembersScalarFieldEnum[]
    having?: CircleMembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CircleMembersCountAggregateInputType | true
    _min?: CircleMembersMinAggregateInputType
    _max?: CircleMembersMaxAggregateInputType
  }


  export type CircleMembersGroupByOutputType = {
    id: string
    userId: string
    circleId: string
    role: string | null
    _count: CircleMembersCountAggregateOutputType | null
    _min: CircleMembersMinAggregateOutputType | null
    _max: CircleMembersMaxAggregateOutputType | null
  }

  type GetCircleMembersGroupByPayload<T extends CircleMembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CircleMembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CircleMembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CircleMembersGroupByOutputType[P]>
            : GetScalarType<T[P], CircleMembersGroupByOutputType[P]>
        }
      >
    >


  export type CircleMembersSelect = {
    id?: boolean
    userId?: boolean
    circleId?: boolean
    role?: boolean
    circle?: boolean | CircleArgs
    member?: boolean | UserArgs
  }


  export type CircleMembersInclude = {
    circle?: boolean | CircleArgs
    member?: boolean | UserArgs
  }

  export type CircleMembersGetPayload<S extends boolean | null | undefined | CircleMembersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CircleMembers :
    S extends undefined ? never :
    S extends { include: any } & (CircleMembersArgs | CircleMembersFindManyArgs)
    ? CircleMembers  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'circle' ? CircleGetPayload<S['include'][P]> :
        P extends 'member' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CircleMembersArgs | CircleMembersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'circle' ? CircleGetPayload<S['select'][P]> :
        P extends 'member' ? UserGetPayload<S['select'][P]> :  P extends keyof CircleMembers ? CircleMembers[P] : never
  } 
      : CircleMembers


  type CircleMembersCountArgs = 
    Omit<CircleMembersFindManyArgs, 'select' | 'include'> & {
      select?: CircleMembersCountAggregateInputType | true
    }

  export interface CircleMembersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one CircleMembers that matches the filter.
     * @param {CircleMembersFindUniqueArgs} args - Arguments to find a CircleMembers
     * @example
     * // Get one CircleMembers
     * const circleMembers = await prisma.circleMembers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CircleMembersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CircleMembersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CircleMembers'> extends True ? Prisma__CircleMembersClient<CircleMembersGetPayload<T>> : Prisma__CircleMembersClient<CircleMembersGetPayload<T> | null, null>

    /**
     * Find one CircleMembers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CircleMembersFindUniqueOrThrowArgs} args - Arguments to find a CircleMembers
     * @example
     * // Get one CircleMembers
     * const circleMembers = await prisma.circleMembers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CircleMembersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CircleMembersFindUniqueOrThrowArgs>
    ): Prisma__CircleMembersClient<CircleMembersGetPayload<T>>

    /**
     * Find the first CircleMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleMembersFindFirstArgs} args - Arguments to find a CircleMembers
     * @example
     * // Get one CircleMembers
     * const circleMembers = await prisma.circleMembers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CircleMembersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CircleMembersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CircleMembers'> extends True ? Prisma__CircleMembersClient<CircleMembersGetPayload<T>> : Prisma__CircleMembersClient<CircleMembersGetPayload<T> | null, null>

    /**
     * Find the first CircleMembers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleMembersFindFirstOrThrowArgs} args - Arguments to find a CircleMembers
     * @example
     * // Get one CircleMembers
     * const circleMembers = await prisma.circleMembers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CircleMembersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CircleMembersFindFirstOrThrowArgs>
    ): Prisma__CircleMembersClient<CircleMembersGetPayload<T>>

    /**
     * Find zero or more CircleMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleMembersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CircleMembers
     * const circleMembers = await prisma.circleMembers.findMany()
     * 
     * // Get first 10 CircleMembers
     * const circleMembers = await prisma.circleMembers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const circleMembersWithIdOnly = await prisma.circleMembers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CircleMembersFindManyArgs>(
      args?: SelectSubset<T, CircleMembersFindManyArgs>
    ): Prisma.PrismaPromise<Array<CircleMembersGetPayload<T>>>

    /**
     * Create a CircleMembers.
     * @param {CircleMembersCreateArgs} args - Arguments to create a CircleMembers.
     * @example
     * // Create one CircleMembers
     * const CircleMembers = await prisma.circleMembers.create({
     *   data: {
     *     // ... data to create a CircleMembers
     *   }
     * })
     * 
    **/
    create<T extends CircleMembersCreateArgs>(
      args: SelectSubset<T, CircleMembersCreateArgs>
    ): Prisma__CircleMembersClient<CircleMembersGetPayload<T>>

    /**
     * Create many CircleMembers.
     *     @param {CircleMembersCreateManyArgs} args - Arguments to create many CircleMembers.
     *     @example
     *     // Create many CircleMembers
     *     const circleMembers = await prisma.circleMembers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CircleMembersCreateManyArgs>(
      args?: SelectSubset<T, CircleMembersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CircleMembers.
     * @param {CircleMembersDeleteArgs} args - Arguments to delete one CircleMembers.
     * @example
     * // Delete one CircleMembers
     * const CircleMembers = await prisma.circleMembers.delete({
     *   where: {
     *     // ... filter to delete one CircleMembers
     *   }
     * })
     * 
    **/
    delete<T extends CircleMembersDeleteArgs>(
      args: SelectSubset<T, CircleMembersDeleteArgs>
    ): Prisma__CircleMembersClient<CircleMembersGetPayload<T>>

    /**
     * Update one CircleMembers.
     * @param {CircleMembersUpdateArgs} args - Arguments to update one CircleMembers.
     * @example
     * // Update one CircleMembers
     * const circleMembers = await prisma.circleMembers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CircleMembersUpdateArgs>(
      args: SelectSubset<T, CircleMembersUpdateArgs>
    ): Prisma__CircleMembersClient<CircleMembersGetPayload<T>>

    /**
     * Delete zero or more CircleMembers.
     * @param {CircleMembersDeleteManyArgs} args - Arguments to filter CircleMembers to delete.
     * @example
     * // Delete a few CircleMembers
     * const { count } = await prisma.circleMembers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CircleMembersDeleteManyArgs>(
      args?: SelectSubset<T, CircleMembersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CircleMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleMembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CircleMembers
     * const circleMembers = await prisma.circleMembers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CircleMembersUpdateManyArgs>(
      args: SelectSubset<T, CircleMembersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CircleMembers.
     * @param {CircleMembersUpsertArgs} args - Arguments to update or create a CircleMembers.
     * @example
     * // Update or create a CircleMembers
     * const circleMembers = await prisma.circleMembers.upsert({
     *   create: {
     *     // ... data to create a CircleMembers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CircleMembers we want to update
     *   }
     * })
    **/
    upsert<T extends CircleMembersUpsertArgs>(
      args: SelectSubset<T, CircleMembersUpsertArgs>
    ): Prisma__CircleMembersClient<CircleMembersGetPayload<T>>

    /**
     * Count the number of CircleMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleMembersCountArgs} args - Arguments to filter CircleMembers to count.
     * @example
     * // Count the number of CircleMembers
     * const count = await prisma.circleMembers.count({
     *   where: {
     *     // ... the filter for the CircleMembers we want to count
     *   }
     * })
    **/
    count<T extends CircleMembersCountArgs>(
      args?: Subset<T, CircleMembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CircleMembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CircleMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleMembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CircleMembersAggregateArgs>(args: Subset<T, CircleMembersAggregateArgs>): Prisma.PrismaPromise<GetCircleMembersAggregateType<T>>

    /**
     * Group by CircleMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CircleMembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CircleMembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CircleMembersGroupByArgs['orderBy'] }
        : { orderBy?: CircleMembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CircleMembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCircleMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CircleMembers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CircleMembersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    circle<T extends CircleArgs= {}>(args?: Subset<T, CircleArgs>): Prisma__CircleClient<CircleGetPayload<T> | Null>;

    member<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CircleMembers base type for findUnique actions
   */
  export type CircleMembersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CircleMembers
     */
    select?: CircleMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleMembersInclude | null
    /**
     * Filter, which CircleMembers to fetch.
     */
    where: CircleMembersWhereUniqueInput
  }

  /**
   * CircleMembers findUnique
   */
  export interface CircleMembersFindUniqueArgs extends CircleMembersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CircleMembers findUniqueOrThrow
   */
  export type CircleMembersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CircleMembers
     */
    select?: CircleMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleMembersInclude | null
    /**
     * Filter, which CircleMembers to fetch.
     */
    where: CircleMembersWhereUniqueInput
  }


  /**
   * CircleMembers base type for findFirst actions
   */
  export type CircleMembersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CircleMembers
     */
    select?: CircleMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleMembersInclude | null
    /**
     * Filter, which CircleMembers to fetch.
     */
    where?: CircleMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CircleMembers to fetch.
     */
    orderBy?: Enumerable<CircleMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CircleMembers.
     */
    cursor?: CircleMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CircleMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CircleMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CircleMembers.
     */
    distinct?: Enumerable<CircleMembersScalarFieldEnum>
  }

  /**
   * CircleMembers findFirst
   */
  export interface CircleMembersFindFirstArgs extends CircleMembersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CircleMembers findFirstOrThrow
   */
  export type CircleMembersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CircleMembers
     */
    select?: CircleMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleMembersInclude | null
    /**
     * Filter, which CircleMembers to fetch.
     */
    where?: CircleMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CircleMembers to fetch.
     */
    orderBy?: Enumerable<CircleMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CircleMembers.
     */
    cursor?: CircleMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CircleMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CircleMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CircleMembers.
     */
    distinct?: Enumerable<CircleMembersScalarFieldEnum>
  }


  /**
   * CircleMembers findMany
   */
  export type CircleMembersFindManyArgs = {
    /**
     * Select specific fields to fetch from the CircleMembers
     */
    select?: CircleMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleMembersInclude | null
    /**
     * Filter, which CircleMembers to fetch.
     */
    where?: CircleMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CircleMembers to fetch.
     */
    orderBy?: Enumerable<CircleMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CircleMembers.
     */
    cursor?: CircleMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CircleMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CircleMembers.
     */
    skip?: number
    distinct?: Enumerable<CircleMembersScalarFieldEnum>
  }


  /**
   * CircleMembers create
   */
  export type CircleMembersCreateArgs = {
    /**
     * Select specific fields to fetch from the CircleMembers
     */
    select?: CircleMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleMembersInclude | null
    /**
     * The data needed to create a CircleMembers.
     */
    data: XOR<CircleMembersCreateInput, CircleMembersUncheckedCreateInput>
  }


  /**
   * CircleMembers createMany
   */
  export type CircleMembersCreateManyArgs = {
    /**
     * The data used to create many CircleMembers.
     */
    data: Enumerable<CircleMembersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CircleMembers update
   */
  export type CircleMembersUpdateArgs = {
    /**
     * Select specific fields to fetch from the CircleMembers
     */
    select?: CircleMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleMembersInclude | null
    /**
     * The data needed to update a CircleMembers.
     */
    data: XOR<CircleMembersUpdateInput, CircleMembersUncheckedUpdateInput>
    /**
     * Choose, which CircleMembers to update.
     */
    where: CircleMembersWhereUniqueInput
  }


  /**
   * CircleMembers updateMany
   */
  export type CircleMembersUpdateManyArgs = {
    /**
     * The data used to update CircleMembers.
     */
    data: XOR<CircleMembersUpdateManyMutationInput, CircleMembersUncheckedUpdateManyInput>
    /**
     * Filter which CircleMembers to update
     */
    where?: CircleMembersWhereInput
  }


  /**
   * CircleMembers upsert
   */
  export type CircleMembersUpsertArgs = {
    /**
     * Select specific fields to fetch from the CircleMembers
     */
    select?: CircleMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleMembersInclude | null
    /**
     * The filter to search for the CircleMembers to update in case it exists.
     */
    where: CircleMembersWhereUniqueInput
    /**
     * In case the CircleMembers found by the `where` argument doesn't exist, create a new CircleMembers with this data.
     */
    create: XOR<CircleMembersCreateInput, CircleMembersUncheckedCreateInput>
    /**
     * In case the CircleMembers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CircleMembersUpdateInput, CircleMembersUncheckedUpdateInput>
  }


  /**
   * CircleMembers delete
   */
  export type CircleMembersDeleteArgs = {
    /**
     * Select specific fields to fetch from the CircleMembers
     */
    select?: CircleMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleMembersInclude | null
    /**
     * Filter which CircleMembers to delete.
     */
    where: CircleMembersWhereUniqueInput
  }


  /**
   * CircleMembers deleteMany
   */
  export type CircleMembersDeleteManyArgs = {
    /**
     * Filter which CircleMembers to delete
     */
    where?: CircleMembersWhereInput
  }


  /**
   * CircleMembers without action
   */
  export type CircleMembersArgs = {
    /**
     * Select specific fields to fetch from the CircleMembers
     */
    select?: CircleMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CircleMembersInclude | null
  }



  /**
   * Model Devices
   */


  export type AggregateDevices = {
    _count: DevicesCountAggregateOutputType | null
    _min: DevicesMinAggregateOutputType | null
    _max: DevicesMaxAggregateOutputType | null
  }

  export type DevicesMinAggregateOutputType = {
    id: string | null
    userId: string | null
    device_type: string | null
    device_version: string | null
    app_version: string | null
  }

  export type DevicesMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    device_type: string | null
    device_version: string | null
    app_version: string | null
  }

  export type DevicesCountAggregateOutputType = {
    id: number
    userId: number
    device_type: number
    device_version: number
    app_version: number
    _all: number
  }


  export type DevicesMinAggregateInputType = {
    id?: true
    userId?: true
    device_type?: true
    device_version?: true
    app_version?: true
  }

  export type DevicesMaxAggregateInputType = {
    id?: true
    userId?: true
    device_type?: true
    device_version?: true
    app_version?: true
  }

  export type DevicesCountAggregateInputType = {
    id?: true
    userId?: true
    device_type?: true
    device_version?: true
    app_version?: true
    _all?: true
  }

  export type DevicesAggregateArgs = {
    /**
     * Filter which Devices to aggregate.
     */
    where?: DevicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DevicesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DevicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Devices
    **/
    _count?: true | DevicesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DevicesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DevicesMaxAggregateInputType
  }

  export type GetDevicesAggregateType<T extends DevicesAggregateArgs> = {
        [P in keyof T & keyof AggregateDevices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDevices[P]>
      : GetScalarType<T[P], AggregateDevices[P]>
  }




  export type DevicesGroupByArgs = {
    where?: DevicesWhereInput
    orderBy?: Enumerable<DevicesOrderByWithAggregationInput>
    by: DevicesScalarFieldEnum[]
    having?: DevicesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DevicesCountAggregateInputType | true
    _min?: DevicesMinAggregateInputType
    _max?: DevicesMaxAggregateInputType
  }


  export type DevicesGroupByOutputType = {
    id: string
    userId: string
    device_type: string
    device_version: string
    app_version: string
    _count: DevicesCountAggregateOutputType | null
    _min: DevicesMinAggregateOutputType | null
    _max: DevicesMaxAggregateOutputType | null
  }

  type GetDevicesGroupByPayload<T extends DevicesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DevicesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DevicesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DevicesGroupByOutputType[P]>
            : GetScalarType<T[P], DevicesGroupByOutputType[P]>
        }
      >
    >


  export type DevicesSelect = {
    id?: boolean
    userId?: boolean
    device_type?: boolean
    device_version?: boolean
    app_version?: boolean
    user?: boolean | UserArgs
  }


  export type DevicesInclude = {
    user?: boolean | UserArgs
  }

  export type DevicesGetPayload<S extends boolean | null | undefined | DevicesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Devices :
    S extends undefined ? never :
    S extends { include: any } & (DevicesArgs | DevicesFindManyArgs)
    ? Devices  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DevicesArgs | DevicesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Devices ? Devices[P] : never
  } 
      : Devices


  type DevicesCountArgs = 
    Omit<DevicesFindManyArgs, 'select' | 'include'> & {
      select?: DevicesCountAggregateInputType | true
    }

  export interface DevicesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Devices that matches the filter.
     * @param {DevicesFindUniqueArgs} args - Arguments to find a Devices
     * @example
     * // Get one Devices
     * const devices = await prisma.devices.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DevicesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DevicesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Devices'> extends True ? Prisma__DevicesClient<DevicesGetPayload<T>> : Prisma__DevicesClient<DevicesGetPayload<T> | null, null>

    /**
     * Find one Devices that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DevicesFindUniqueOrThrowArgs} args - Arguments to find a Devices
     * @example
     * // Get one Devices
     * const devices = await prisma.devices.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DevicesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DevicesFindUniqueOrThrowArgs>
    ): Prisma__DevicesClient<DevicesGetPayload<T>>

    /**
     * Find the first Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevicesFindFirstArgs} args - Arguments to find a Devices
     * @example
     * // Get one Devices
     * const devices = await prisma.devices.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DevicesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DevicesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Devices'> extends True ? Prisma__DevicesClient<DevicesGetPayload<T>> : Prisma__DevicesClient<DevicesGetPayload<T> | null, null>

    /**
     * Find the first Devices that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevicesFindFirstOrThrowArgs} args - Arguments to find a Devices
     * @example
     * // Get one Devices
     * const devices = await prisma.devices.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DevicesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DevicesFindFirstOrThrowArgs>
    ): Prisma__DevicesClient<DevicesGetPayload<T>>

    /**
     * Find zero or more Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevicesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devices
     * const devices = await prisma.devices.findMany()
     * 
     * // Get first 10 Devices
     * const devices = await prisma.devices.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const devicesWithIdOnly = await prisma.devices.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DevicesFindManyArgs>(
      args?: SelectSubset<T, DevicesFindManyArgs>
    ): Prisma.PrismaPromise<Array<DevicesGetPayload<T>>>

    /**
     * Create a Devices.
     * @param {DevicesCreateArgs} args - Arguments to create a Devices.
     * @example
     * // Create one Devices
     * const Devices = await prisma.devices.create({
     *   data: {
     *     // ... data to create a Devices
     *   }
     * })
     * 
    **/
    create<T extends DevicesCreateArgs>(
      args: SelectSubset<T, DevicesCreateArgs>
    ): Prisma__DevicesClient<DevicesGetPayload<T>>

    /**
     * Create many Devices.
     *     @param {DevicesCreateManyArgs} args - Arguments to create many Devices.
     *     @example
     *     // Create many Devices
     *     const devices = await prisma.devices.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DevicesCreateManyArgs>(
      args?: SelectSubset<T, DevicesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Devices.
     * @param {DevicesDeleteArgs} args - Arguments to delete one Devices.
     * @example
     * // Delete one Devices
     * const Devices = await prisma.devices.delete({
     *   where: {
     *     // ... filter to delete one Devices
     *   }
     * })
     * 
    **/
    delete<T extends DevicesDeleteArgs>(
      args: SelectSubset<T, DevicesDeleteArgs>
    ): Prisma__DevicesClient<DevicesGetPayload<T>>

    /**
     * Update one Devices.
     * @param {DevicesUpdateArgs} args - Arguments to update one Devices.
     * @example
     * // Update one Devices
     * const devices = await prisma.devices.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DevicesUpdateArgs>(
      args: SelectSubset<T, DevicesUpdateArgs>
    ): Prisma__DevicesClient<DevicesGetPayload<T>>

    /**
     * Delete zero or more Devices.
     * @param {DevicesDeleteManyArgs} args - Arguments to filter Devices to delete.
     * @example
     * // Delete a few Devices
     * const { count } = await prisma.devices.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DevicesDeleteManyArgs>(
      args?: SelectSubset<T, DevicesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevicesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devices
     * const devices = await prisma.devices.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DevicesUpdateManyArgs>(
      args: SelectSubset<T, DevicesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Devices.
     * @param {DevicesUpsertArgs} args - Arguments to update or create a Devices.
     * @example
     * // Update or create a Devices
     * const devices = await prisma.devices.upsert({
     *   create: {
     *     // ... data to create a Devices
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Devices we want to update
     *   }
     * })
    **/
    upsert<T extends DevicesUpsertArgs>(
      args: SelectSubset<T, DevicesUpsertArgs>
    ): Prisma__DevicesClient<DevicesGetPayload<T>>

    /**
     * Count the number of Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevicesCountArgs} args - Arguments to filter Devices to count.
     * @example
     * // Count the number of Devices
     * const count = await prisma.devices.count({
     *   where: {
     *     // ... the filter for the Devices we want to count
     *   }
     * })
    **/
    count<T extends DevicesCountArgs>(
      args?: Subset<T, DevicesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DevicesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DevicesAggregateArgs>(args: Subset<T, DevicesAggregateArgs>): Prisma.PrismaPromise<GetDevicesAggregateType<T>>

    /**
     * Group by Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevicesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DevicesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DevicesGroupByArgs['orderBy'] }
        : { orderBy?: DevicesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DevicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDevicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Devices.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DevicesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Devices base type for findUnique actions
   */
  export type DevicesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Devices
     */
    select?: DevicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevicesInclude | null
    /**
     * Filter, which Devices to fetch.
     */
    where: DevicesWhereUniqueInput
  }

  /**
   * Devices findUnique
   */
  export interface DevicesFindUniqueArgs extends DevicesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Devices findUniqueOrThrow
   */
  export type DevicesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Devices
     */
    select?: DevicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevicesInclude | null
    /**
     * Filter, which Devices to fetch.
     */
    where: DevicesWhereUniqueInput
  }


  /**
   * Devices base type for findFirst actions
   */
  export type DevicesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Devices
     */
    select?: DevicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevicesInclude | null
    /**
     * Filter, which Devices to fetch.
     */
    where?: DevicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DevicesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DevicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: Enumerable<DevicesScalarFieldEnum>
  }

  /**
   * Devices findFirst
   */
  export interface DevicesFindFirstArgs extends DevicesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Devices findFirstOrThrow
   */
  export type DevicesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Devices
     */
    select?: DevicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevicesInclude | null
    /**
     * Filter, which Devices to fetch.
     */
    where?: DevicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DevicesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DevicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: Enumerable<DevicesScalarFieldEnum>
  }


  /**
   * Devices findMany
   */
  export type DevicesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Devices
     */
    select?: DevicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevicesInclude | null
    /**
     * Filter, which Devices to fetch.
     */
    where?: DevicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: Enumerable<DevicesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Devices.
     */
    cursor?: DevicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    distinct?: Enumerable<DevicesScalarFieldEnum>
  }


  /**
   * Devices create
   */
  export type DevicesCreateArgs = {
    /**
     * Select specific fields to fetch from the Devices
     */
    select?: DevicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevicesInclude | null
    /**
     * The data needed to create a Devices.
     */
    data: XOR<DevicesCreateInput, DevicesUncheckedCreateInput>
  }


  /**
   * Devices createMany
   */
  export type DevicesCreateManyArgs = {
    /**
     * The data used to create many Devices.
     */
    data: Enumerable<DevicesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Devices update
   */
  export type DevicesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Devices
     */
    select?: DevicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevicesInclude | null
    /**
     * The data needed to update a Devices.
     */
    data: XOR<DevicesUpdateInput, DevicesUncheckedUpdateInput>
    /**
     * Choose, which Devices to update.
     */
    where: DevicesWhereUniqueInput
  }


  /**
   * Devices updateMany
   */
  export type DevicesUpdateManyArgs = {
    /**
     * The data used to update Devices.
     */
    data: XOR<DevicesUpdateManyMutationInput, DevicesUncheckedUpdateManyInput>
    /**
     * Filter which Devices to update
     */
    where?: DevicesWhereInput
  }


  /**
   * Devices upsert
   */
  export type DevicesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Devices
     */
    select?: DevicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevicesInclude | null
    /**
     * The filter to search for the Devices to update in case it exists.
     */
    where: DevicesWhereUniqueInput
    /**
     * In case the Devices found by the `where` argument doesn't exist, create a new Devices with this data.
     */
    create: XOR<DevicesCreateInput, DevicesUncheckedCreateInput>
    /**
     * In case the Devices was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DevicesUpdateInput, DevicesUncheckedUpdateInput>
  }


  /**
   * Devices delete
   */
  export type DevicesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Devices
     */
    select?: DevicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevicesInclude | null
    /**
     * Filter which Devices to delete.
     */
    where: DevicesWhereUniqueInput
  }


  /**
   * Devices deleteMany
   */
  export type DevicesDeleteManyArgs = {
    /**
     * Filter which Devices to delete
     */
    where?: DevicesWhereInput
  }


  /**
   * Devices without action
   */
  export type DevicesArgs = {
    /**
     * Select specific fields to fetch from the Devices
     */
    select?: DevicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevicesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CircleMembersScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    circleId: 'circleId',
    role: 'role'
  };

  export type CircleMembersScalarFieldEnum = (typeof CircleMembersScalarFieldEnum)[keyof typeof CircleMembersScalarFieldEnum]


  export const CircleScalarFieldEnum: {
    id: 'id',
    circleCode: 'circleCode',
    codeExpiresAt: 'codeExpiresAt',
    title: 'title',
    description: 'description',
    createdUserId: 'createdUserId'
  };

  export type CircleScalarFieldEnum = (typeof CircleScalarFieldEnum)[keyof typeof CircleScalarFieldEnum]


  export const DevicesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    device_type: 'device_type',
    device_version: 'device_version',
    app_version: 'app_version'
  };

  export type DevicesScalarFieldEnum = (typeof DevicesScalarFieldEnum)[keyof typeof DevicesScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    latitude: 'latitude',
    longitude: 'longitude',
    userId: 'userId',
    circleId: 'circleId'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const PlacesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    latitude: 'latitude',
    longitude: 'longitude',
    userId: 'userId',
    circleId: 'circleId'
  };

  export type PlacesScalarFieldEnum = (typeof PlacesScalarFieldEnum)[keyof typeof PlacesScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    mobileNo: 'mobileNo',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    hashedPassword: 'hashedPassword',
    hashedRefreshToken: 'hashedRefreshToken',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastSeen: 'lastSeen'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    mobileNo?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    hashedPassword?: StringFilter | string
    hashedRefreshToken?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    lastSeen?: DateTimeFilter | Date | string
    circle?: CircleListRelationFilter
    circleMembers?: CircleMembersListRelationFilter
    devices?: DevicesListRelationFilter
    location?: LocationListRelationFilter
    places?: PlacesListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    mobileNo?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastSeen?: SortOrder
    circle?: CircleOrderByRelationAggregateInput
    circleMembers?: CircleMembersOrderByRelationAggregateInput
    devices?: DevicesOrderByRelationAggregateInput
    location?: LocationOrderByRelationAggregateInput
    places?: PlacesOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    mobileNo?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastSeen?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    mobileNo?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    hashedPassword?: StringWithAggregatesFilter | string
    hashedRefreshToken?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    lastSeen?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LocationWhereInput = {
    AND?: Enumerable<LocationWhereInput>
    OR?: Enumerable<LocationWhereInput>
    NOT?: Enumerable<LocationWhereInput>
    id?: StringFilter | string
    latitude?: FloatFilter | number
    longitude?: FloatFilter | number
    userId?: StringFilter | string
    circleId?: StringFilter | string
    circle?: XOR<CircleRelationFilter, CircleWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
    circle?: CircleOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type LocationWhereUniqueInput = {
    id?: string
  }

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LocationScalarWhereWithAggregatesInput>
    OR?: Enumerable<LocationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LocationScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    latitude?: FloatWithAggregatesFilter | number
    longitude?: FloatWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    circleId?: StringWithAggregatesFilter | string
  }

  export type PlacesWhereInput = {
    AND?: Enumerable<PlacesWhereInput>
    OR?: Enumerable<PlacesWhereInput>
    NOT?: Enumerable<PlacesWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    latitude?: FloatFilter | number
    longitude?: FloatFilter | number
    userId?: StringFilter | string
    circleId?: StringFilter | string
    circle?: XOR<CircleRelationFilter, CircleWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PlacesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
    circle?: CircleOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type PlacesWhereUniqueInput = {
    id?: string
  }

  export type PlacesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
    _count?: PlacesCountOrderByAggregateInput
    _avg?: PlacesAvgOrderByAggregateInput
    _max?: PlacesMaxOrderByAggregateInput
    _min?: PlacesMinOrderByAggregateInput
    _sum?: PlacesSumOrderByAggregateInput
  }

  export type PlacesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PlacesScalarWhereWithAggregatesInput>
    OR?: Enumerable<PlacesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PlacesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    latitude?: FloatWithAggregatesFilter | number
    longitude?: FloatWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    circleId?: StringWithAggregatesFilter | string
  }

  export type CircleWhereInput = {
    AND?: Enumerable<CircleWhereInput>
    OR?: Enumerable<CircleWhereInput>
    NOT?: Enumerable<CircleWhereInput>
    id?: StringFilter | string
    circleCode?: StringFilter | string
    codeExpiresAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    createdUserId?: StringFilter | string
    createdUser?: XOR<UserRelationFilter, UserWhereInput>
    circleMembers?: CircleMembersListRelationFilter
    location?: LocationListRelationFilter
    places?: PlacesListRelationFilter
  }

  export type CircleOrderByWithRelationInput = {
    id?: SortOrder
    circleCode?: SortOrder
    codeExpiresAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdUserId?: SortOrder
    createdUser?: UserOrderByWithRelationInput
    circleMembers?: CircleMembersOrderByRelationAggregateInput
    location?: LocationOrderByRelationAggregateInput
    places?: PlacesOrderByRelationAggregateInput
  }

  export type CircleWhereUniqueInput = {
    id?: string
  }

  export type CircleOrderByWithAggregationInput = {
    id?: SortOrder
    circleCode?: SortOrder
    codeExpiresAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdUserId?: SortOrder
    _count?: CircleCountOrderByAggregateInput
    _max?: CircleMaxOrderByAggregateInput
    _min?: CircleMinOrderByAggregateInput
  }

  export type CircleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CircleScalarWhereWithAggregatesInput>
    OR?: Enumerable<CircleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CircleScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    circleCode?: StringWithAggregatesFilter | string
    codeExpiresAt?: DateTimeWithAggregatesFilter | Date | string
    title?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    createdUserId?: StringWithAggregatesFilter | string
  }

  export type CircleMembersWhereInput = {
    AND?: Enumerable<CircleMembersWhereInput>
    OR?: Enumerable<CircleMembersWhereInput>
    NOT?: Enumerable<CircleMembersWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    circleId?: StringFilter | string
    role?: StringNullableFilter | string | null
    circle?: XOR<CircleRelationFilter, CircleWhereInput>
    member?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CircleMembersOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
    role?: SortOrder
    circle?: CircleOrderByWithRelationInput
    member?: UserOrderByWithRelationInput
  }

  export type CircleMembersWhereUniqueInput = {
    id?: string
    userId_circleId?: CircleMembersUserId_circleIdCompoundUniqueInput
  }

  export type CircleMembersOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
    role?: SortOrder
    _count?: CircleMembersCountOrderByAggregateInput
    _max?: CircleMembersMaxOrderByAggregateInput
    _min?: CircleMembersMinOrderByAggregateInput
  }

  export type CircleMembersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CircleMembersScalarWhereWithAggregatesInput>
    OR?: Enumerable<CircleMembersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CircleMembersScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    circleId?: StringWithAggregatesFilter | string
    role?: StringNullableWithAggregatesFilter | string | null
  }

  export type DevicesWhereInput = {
    AND?: Enumerable<DevicesWhereInput>
    OR?: Enumerable<DevicesWhereInput>
    NOT?: Enumerable<DevicesWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    device_type?: StringFilter | string
    device_version?: StringFilter | string
    app_version?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type DevicesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    device_type?: SortOrder
    device_version?: SortOrder
    app_version?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DevicesWhereUniqueInput = {
    id?: string
  }

  export type DevicesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    device_type?: SortOrder
    device_version?: SortOrder
    app_version?: SortOrder
    _count?: DevicesCountOrderByAggregateInput
    _max?: DevicesMaxOrderByAggregateInput
    _min?: DevicesMinOrderByAggregateInput
  }

  export type DevicesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DevicesScalarWhereWithAggregatesInput>
    OR?: Enumerable<DevicesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DevicesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    device_type?: StringWithAggregatesFilter | string
    device_version?: StringWithAggregatesFilter | string
    app_version?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
    circle?: CircleCreateNestedManyWithoutCreatedUserInput
    circleMembers?: CircleMembersCreateNestedManyWithoutMemberInput
    devices?: DevicesCreateNestedManyWithoutUserInput
    location?: LocationCreateNestedManyWithoutUserInput
    places?: PlacesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
    circle?: CircleUncheckedCreateNestedManyWithoutCreatedUserInput
    circleMembers?: CircleMembersUncheckedCreateNestedManyWithoutMemberInput
    devices?: DevicesUncheckedCreateNestedManyWithoutUserInput
    location?: LocationUncheckedCreateNestedManyWithoutUserInput
    places?: PlacesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    circle?: CircleUpdateManyWithoutCreatedUserNestedInput
    circleMembers?: CircleMembersUpdateManyWithoutMemberNestedInput
    devices?: DevicesUpdateManyWithoutUserNestedInput
    location?: LocationUpdateManyWithoutUserNestedInput
    places?: PlacesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    circle?: CircleUncheckedUpdateManyWithoutCreatedUserNestedInput
    circleMembers?: CircleMembersUncheckedUpdateManyWithoutMemberNestedInput
    devices?: DevicesUncheckedUpdateManyWithoutUserNestedInput
    location?: LocationUncheckedUpdateManyWithoutUserNestedInput
    places?: PlacesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateInput = {
    id?: string
    latitude: number
    longitude: number
    circle: CircleCreateNestedOneWithoutLocationInput
    user: UserCreateNestedOneWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: string
    latitude: number
    longitude: number
    userId: string
    circleId: string
  }

  export type LocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    circle?: CircleUpdateOneRequiredWithoutLocationNestedInput
    user?: UserUpdateOneRequiredWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    circleId?: StringFieldUpdateOperationsInput | string
  }

  export type LocationCreateManyInput = {
    id?: string
    latitude: number
    longitude: number
    userId: string
    circleId: string
  }

  export type LocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    circleId?: StringFieldUpdateOperationsInput | string
  }

  export type PlacesCreateInput = {
    id?: string
    name: string
    latitude: number
    longitude: number
    circle: CircleCreateNestedOneWithoutPlacesInput
    user: UserCreateNestedOneWithoutPlacesInput
  }

  export type PlacesUncheckedCreateInput = {
    id?: string
    name: string
    latitude: number
    longitude: number
    userId: string
    circleId: string
  }

  export type PlacesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    circle?: CircleUpdateOneRequiredWithoutPlacesNestedInput
    user?: UserUpdateOneRequiredWithoutPlacesNestedInput
  }

  export type PlacesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    circleId?: StringFieldUpdateOperationsInput | string
  }

  export type PlacesCreateManyInput = {
    id?: string
    name: string
    latitude: number
    longitude: number
    userId: string
    circleId: string
  }

  export type PlacesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type PlacesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    circleId?: StringFieldUpdateOperationsInput | string
  }

  export type CircleCreateInput = {
    id?: string
    circleCode: string
    codeExpiresAt?: Date | string
    title: string
    description?: string | null
    createdUser: UserCreateNestedOneWithoutCircleInput
    circleMembers?: CircleMembersCreateNestedManyWithoutCircleInput
    location?: LocationCreateNestedManyWithoutCircleInput
    places?: PlacesCreateNestedManyWithoutCircleInput
  }

  export type CircleUncheckedCreateInput = {
    id?: string
    circleCode: string
    codeExpiresAt?: Date | string
    title: string
    description?: string | null
    createdUserId: string
    circleMembers?: CircleMembersUncheckedCreateNestedManyWithoutCircleInput
    location?: LocationUncheckedCreateNestedManyWithoutCircleInput
    places?: PlacesUncheckedCreateNestedManyWithoutCircleInput
  }

  export type CircleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdUser?: UserUpdateOneRequiredWithoutCircleNestedInput
    circleMembers?: CircleMembersUpdateManyWithoutCircleNestedInput
    location?: LocationUpdateManyWithoutCircleNestedInput
    places?: PlacesUpdateManyWithoutCircleNestedInput
  }

  export type CircleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdUserId?: StringFieldUpdateOperationsInput | string
    circleMembers?: CircleMembersUncheckedUpdateManyWithoutCircleNestedInput
    location?: LocationUncheckedUpdateManyWithoutCircleNestedInput
    places?: PlacesUncheckedUpdateManyWithoutCircleNestedInput
  }

  export type CircleCreateManyInput = {
    id?: string
    circleCode: string
    codeExpiresAt?: Date | string
    title: string
    description?: string | null
    createdUserId: string
  }

  export type CircleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CircleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdUserId?: StringFieldUpdateOperationsInput | string
  }

  export type CircleMembersCreateInput = {
    id?: string
    role?: string | null
    circle: CircleCreateNestedOneWithoutCircleMembersInput
    member: UserCreateNestedOneWithoutCircleMembersInput
  }

  export type CircleMembersUncheckedCreateInput = {
    id?: string
    userId: string
    circleId: string
    role?: string | null
  }

  export type CircleMembersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    circle?: CircleUpdateOneRequiredWithoutCircleMembersNestedInput
    member?: UserUpdateOneRequiredWithoutCircleMembersNestedInput
  }

  export type CircleMembersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    circleId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CircleMembersCreateManyInput = {
    id?: string
    userId: string
    circleId: string
    role?: string | null
  }

  export type CircleMembersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CircleMembersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    circleId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DevicesCreateInput = {
    id?: string
    device_type: string
    device_version: string
    app_version: string
    user: UserCreateNestedOneWithoutDevicesInput
  }

  export type DevicesUncheckedCreateInput = {
    id?: string
    userId: string
    device_type: string
    device_version: string
    app_version: string
  }

  export type DevicesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    device_type?: StringFieldUpdateOperationsInput | string
    device_version?: StringFieldUpdateOperationsInput | string
    app_version?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutDevicesNestedInput
  }

  export type DevicesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    device_type?: StringFieldUpdateOperationsInput | string
    device_version?: StringFieldUpdateOperationsInput | string
    app_version?: StringFieldUpdateOperationsInput | string
  }

  export type DevicesCreateManyInput = {
    id?: string
    userId: string
    device_type: string
    device_version: string
    app_version: string
  }

  export type DevicesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    device_type?: StringFieldUpdateOperationsInput | string
    device_version?: StringFieldUpdateOperationsInput | string
    app_version?: StringFieldUpdateOperationsInput | string
  }

  export type DevicesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    device_type?: StringFieldUpdateOperationsInput | string
    device_version?: StringFieldUpdateOperationsInput | string
    app_version?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CircleListRelationFilter = {
    every?: CircleWhereInput
    some?: CircleWhereInput
    none?: CircleWhereInput
  }

  export type CircleMembersListRelationFilter = {
    every?: CircleMembersWhereInput
    some?: CircleMembersWhereInput
    none?: CircleMembersWhereInput
  }

  export type DevicesListRelationFilter = {
    every?: DevicesWhereInput
    some?: DevicesWhereInput
    none?: DevicesWhereInput
  }

  export type LocationListRelationFilter = {
    every?: LocationWhereInput
    some?: LocationWhereInput
    none?: LocationWhereInput
  }

  export type PlacesListRelationFilter = {
    every?: PlacesWhereInput
    some?: PlacesWhereInput
    none?: PlacesWhereInput
  }

  export type CircleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CircleMembersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DevicesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlacesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    mobileNo?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastSeen?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    mobileNo?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastSeen?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    mobileNo?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastSeen?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type CircleRelationFilter = {
    is?: CircleWhereInput
    isNot?: CircleWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type PlacesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
  }

  export type PlacesAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type PlacesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
  }

  export type PlacesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
  }

  export type PlacesSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type CircleCountOrderByAggregateInput = {
    id?: SortOrder
    circleCode?: SortOrder
    codeExpiresAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdUserId?: SortOrder
  }

  export type CircleMaxOrderByAggregateInput = {
    id?: SortOrder
    circleCode?: SortOrder
    codeExpiresAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdUserId?: SortOrder
  }

  export type CircleMinOrderByAggregateInput = {
    id?: SortOrder
    circleCode?: SortOrder
    codeExpiresAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdUserId?: SortOrder
  }

  export type CircleMembersUserId_circleIdCompoundUniqueInput = {
    userId: string
    circleId: string
  }

  export type CircleMembersCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
    role?: SortOrder
  }

  export type CircleMembersMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
    role?: SortOrder
  }

  export type CircleMembersMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    circleId?: SortOrder
    role?: SortOrder
  }

  export type DevicesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    device_type?: SortOrder
    device_version?: SortOrder
    app_version?: SortOrder
  }

  export type DevicesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    device_type?: SortOrder
    device_version?: SortOrder
    app_version?: SortOrder
  }

  export type DevicesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    device_type?: SortOrder
    device_version?: SortOrder
    app_version?: SortOrder
  }

  export type CircleCreateNestedManyWithoutCreatedUserInput = {
    create?: XOR<Enumerable<CircleCreateWithoutCreatedUserInput>, Enumerable<CircleUncheckedCreateWithoutCreatedUserInput>>
    connectOrCreate?: Enumerable<CircleCreateOrConnectWithoutCreatedUserInput>
    createMany?: CircleCreateManyCreatedUserInputEnvelope
    connect?: Enumerable<CircleWhereUniqueInput>
  }

  export type CircleMembersCreateNestedManyWithoutMemberInput = {
    create?: XOR<Enumerable<CircleMembersCreateWithoutMemberInput>, Enumerable<CircleMembersUncheckedCreateWithoutMemberInput>>
    connectOrCreate?: Enumerable<CircleMembersCreateOrConnectWithoutMemberInput>
    createMany?: CircleMembersCreateManyMemberInputEnvelope
    connect?: Enumerable<CircleMembersWhereUniqueInput>
  }

  export type DevicesCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<DevicesCreateWithoutUserInput>, Enumerable<DevicesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DevicesCreateOrConnectWithoutUserInput>
    createMany?: DevicesCreateManyUserInputEnvelope
    connect?: Enumerable<DevicesWhereUniqueInput>
  }

  export type LocationCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<LocationCreateWithoutUserInput>, Enumerable<LocationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LocationCreateOrConnectWithoutUserInput>
    createMany?: LocationCreateManyUserInputEnvelope
    connect?: Enumerable<LocationWhereUniqueInput>
  }

  export type PlacesCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PlacesCreateWithoutUserInput>, Enumerable<PlacesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PlacesCreateOrConnectWithoutUserInput>
    createMany?: PlacesCreateManyUserInputEnvelope
    connect?: Enumerable<PlacesWhereUniqueInput>
  }

  export type CircleUncheckedCreateNestedManyWithoutCreatedUserInput = {
    create?: XOR<Enumerable<CircleCreateWithoutCreatedUserInput>, Enumerable<CircleUncheckedCreateWithoutCreatedUserInput>>
    connectOrCreate?: Enumerable<CircleCreateOrConnectWithoutCreatedUserInput>
    createMany?: CircleCreateManyCreatedUserInputEnvelope
    connect?: Enumerable<CircleWhereUniqueInput>
  }

  export type CircleMembersUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<Enumerable<CircleMembersCreateWithoutMemberInput>, Enumerable<CircleMembersUncheckedCreateWithoutMemberInput>>
    connectOrCreate?: Enumerable<CircleMembersCreateOrConnectWithoutMemberInput>
    createMany?: CircleMembersCreateManyMemberInputEnvelope
    connect?: Enumerable<CircleMembersWhereUniqueInput>
  }

  export type DevicesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<DevicesCreateWithoutUserInput>, Enumerable<DevicesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DevicesCreateOrConnectWithoutUserInput>
    createMany?: DevicesCreateManyUserInputEnvelope
    connect?: Enumerable<DevicesWhereUniqueInput>
  }

  export type LocationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<LocationCreateWithoutUserInput>, Enumerable<LocationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LocationCreateOrConnectWithoutUserInput>
    createMany?: LocationCreateManyUserInputEnvelope
    connect?: Enumerable<LocationWhereUniqueInput>
  }

  export type PlacesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PlacesCreateWithoutUserInput>, Enumerable<PlacesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PlacesCreateOrConnectWithoutUserInput>
    createMany?: PlacesCreateManyUserInputEnvelope
    connect?: Enumerable<PlacesWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CircleUpdateManyWithoutCreatedUserNestedInput = {
    create?: XOR<Enumerable<CircleCreateWithoutCreatedUserInput>, Enumerable<CircleUncheckedCreateWithoutCreatedUserInput>>
    connectOrCreate?: Enumerable<CircleCreateOrConnectWithoutCreatedUserInput>
    upsert?: Enumerable<CircleUpsertWithWhereUniqueWithoutCreatedUserInput>
    createMany?: CircleCreateManyCreatedUserInputEnvelope
    set?: Enumerable<CircleWhereUniqueInput>
    disconnect?: Enumerable<CircleWhereUniqueInput>
    delete?: Enumerable<CircleWhereUniqueInput>
    connect?: Enumerable<CircleWhereUniqueInput>
    update?: Enumerable<CircleUpdateWithWhereUniqueWithoutCreatedUserInput>
    updateMany?: Enumerable<CircleUpdateManyWithWhereWithoutCreatedUserInput>
    deleteMany?: Enumerable<CircleScalarWhereInput>
  }

  export type CircleMembersUpdateManyWithoutMemberNestedInput = {
    create?: XOR<Enumerable<CircleMembersCreateWithoutMemberInput>, Enumerable<CircleMembersUncheckedCreateWithoutMemberInput>>
    connectOrCreate?: Enumerable<CircleMembersCreateOrConnectWithoutMemberInput>
    upsert?: Enumerable<CircleMembersUpsertWithWhereUniqueWithoutMemberInput>
    createMany?: CircleMembersCreateManyMemberInputEnvelope
    set?: Enumerable<CircleMembersWhereUniqueInput>
    disconnect?: Enumerable<CircleMembersWhereUniqueInput>
    delete?: Enumerable<CircleMembersWhereUniqueInput>
    connect?: Enumerable<CircleMembersWhereUniqueInput>
    update?: Enumerable<CircleMembersUpdateWithWhereUniqueWithoutMemberInput>
    updateMany?: Enumerable<CircleMembersUpdateManyWithWhereWithoutMemberInput>
    deleteMany?: Enumerable<CircleMembersScalarWhereInput>
  }

  export type DevicesUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<DevicesCreateWithoutUserInput>, Enumerable<DevicesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DevicesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<DevicesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: DevicesCreateManyUserInputEnvelope
    set?: Enumerable<DevicesWhereUniqueInput>
    disconnect?: Enumerable<DevicesWhereUniqueInput>
    delete?: Enumerable<DevicesWhereUniqueInput>
    connect?: Enumerable<DevicesWhereUniqueInput>
    update?: Enumerable<DevicesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<DevicesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<DevicesScalarWhereInput>
  }

  export type LocationUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<LocationCreateWithoutUserInput>, Enumerable<LocationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LocationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<LocationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: LocationCreateManyUserInputEnvelope
    set?: Enumerable<LocationWhereUniqueInput>
    disconnect?: Enumerable<LocationWhereUniqueInput>
    delete?: Enumerable<LocationWhereUniqueInput>
    connect?: Enumerable<LocationWhereUniqueInput>
    update?: Enumerable<LocationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LocationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LocationScalarWhereInput>
  }

  export type PlacesUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PlacesCreateWithoutUserInput>, Enumerable<PlacesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PlacesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PlacesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PlacesCreateManyUserInputEnvelope
    set?: Enumerable<PlacesWhereUniqueInput>
    disconnect?: Enumerable<PlacesWhereUniqueInput>
    delete?: Enumerable<PlacesWhereUniqueInput>
    connect?: Enumerable<PlacesWhereUniqueInput>
    update?: Enumerable<PlacesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PlacesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PlacesScalarWhereInput>
  }

  export type CircleUncheckedUpdateManyWithoutCreatedUserNestedInput = {
    create?: XOR<Enumerable<CircleCreateWithoutCreatedUserInput>, Enumerable<CircleUncheckedCreateWithoutCreatedUserInput>>
    connectOrCreate?: Enumerable<CircleCreateOrConnectWithoutCreatedUserInput>
    upsert?: Enumerable<CircleUpsertWithWhereUniqueWithoutCreatedUserInput>
    createMany?: CircleCreateManyCreatedUserInputEnvelope
    set?: Enumerable<CircleWhereUniqueInput>
    disconnect?: Enumerable<CircleWhereUniqueInput>
    delete?: Enumerable<CircleWhereUniqueInput>
    connect?: Enumerable<CircleWhereUniqueInput>
    update?: Enumerable<CircleUpdateWithWhereUniqueWithoutCreatedUserInput>
    updateMany?: Enumerable<CircleUpdateManyWithWhereWithoutCreatedUserInput>
    deleteMany?: Enumerable<CircleScalarWhereInput>
  }

  export type CircleMembersUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<Enumerable<CircleMembersCreateWithoutMemberInput>, Enumerable<CircleMembersUncheckedCreateWithoutMemberInput>>
    connectOrCreate?: Enumerable<CircleMembersCreateOrConnectWithoutMemberInput>
    upsert?: Enumerable<CircleMembersUpsertWithWhereUniqueWithoutMemberInput>
    createMany?: CircleMembersCreateManyMemberInputEnvelope
    set?: Enumerable<CircleMembersWhereUniqueInput>
    disconnect?: Enumerable<CircleMembersWhereUniqueInput>
    delete?: Enumerable<CircleMembersWhereUniqueInput>
    connect?: Enumerable<CircleMembersWhereUniqueInput>
    update?: Enumerable<CircleMembersUpdateWithWhereUniqueWithoutMemberInput>
    updateMany?: Enumerable<CircleMembersUpdateManyWithWhereWithoutMemberInput>
    deleteMany?: Enumerable<CircleMembersScalarWhereInput>
  }

  export type DevicesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<DevicesCreateWithoutUserInput>, Enumerable<DevicesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DevicesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<DevicesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: DevicesCreateManyUserInputEnvelope
    set?: Enumerable<DevicesWhereUniqueInput>
    disconnect?: Enumerable<DevicesWhereUniqueInput>
    delete?: Enumerable<DevicesWhereUniqueInput>
    connect?: Enumerable<DevicesWhereUniqueInput>
    update?: Enumerable<DevicesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<DevicesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<DevicesScalarWhereInput>
  }

  export type LocationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<LocationCreateWithoutUserInput>, Enumerable<LocationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LocationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<LocationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: LocationCreateManyUserInputEnvelope
    set?: Enumerable<LocationWhereUniqueInput>
    disconnect?: Enumerable<LocationWhereUniqueInput>
    delete?: Enumerable<LocationWhereUniqueInput>
    connect?: Enumerable<LocationWhereUniqueInput>
    update?: Enumerable<LocationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LocationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LocationScalarWhereInput>
  }

  export type PlacesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PlacesCreateWithoutUserInput>, Enumerable<PlacesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PlacesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PlacesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PlacesCreateManyUserInputEnvelope
    set?: Enumerable<PlacesWhereUniqueInput>
    disconnect?: Enumerable<PlacesWhereUniqueInput>
    delete?: Enumerable<PlacesWhereUniqueInput>
    connect?: Enumerable<PlacesWhereUniqueInput>
    update?: Enumerable<PlacesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PlacesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PlacesScalarWhereInput>
  }

  export type CircleCreateNestedOneWithoutLocationInput = {
    create?: XOR<CircleCreateWithoutLocationInput, CircleUncheckedCreateWithoutLocationInput>
    connectOrCreate?: CircleCreateOrConnectWithoutLocationInput
    connect?: CircleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLocationInput = {
    create?: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput>
    connectOrCreate?: UserCreateOrConnectWithoutLocationInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CircleUpdateOneRequiredWithoutLocationNestedInput = {
    create?: XOR<CircleCreateWithoutLocationInput, CircleUncheckedCreateWithoutLocationInput>
    connectOrCreate?: CircleCreateOrConnectWithoutLocationInput
    upsert?: CircleUpsertWithoutLocationInput
    connect?: CircleWhereUniqueInput
    update?: XOR<CircleUpdateWithoutLocationInput, CircleUncheckedUpdateWithoutLocationInput>
  }

  export type UserUpdateOneRequiredWithoutLocationNestedInput = {
    create?: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput>
    connectOrCreate?: UserCreateOrConnectWithoutLocationInput
    upsert?: UserUpsertWithoutLocationInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutLocationInput, UserUncheckedUpdateWithoutLocationInput>
  }

  export type CircleCreateNestedOneWithoutPlacesInput = {
    create?: XOR<CircleCreateWithoutPlacesInput, CircleUncheckedCreateWithoutPlacesInput>
    connectOrCreate?: CircleCreateOrConnectWithoutPlacesInput
    connect?: CircleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPlacesInput = {
    create?: XOR<UserCreateWithoutPlacesInput, UserUncheckedCreateWithoutPlacesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlacesInput
    connect?: UserWhereUniqueInput
  }

  export type CircleUpdateOneRequiredWithoutPlacesNestedInput = {
    create?: XOR<CircleCreateWithoutPlacesInput, CircleUncheckedCreateWithoutPlacesInput>
    connectOrCreate?: CircleCreateOrConnectWithoutPlacesInput
    upsert?: CircleUpsertWithoutPlacesInput
    connect?: CircleWhereUniqueInput
    update?: XOR<CircleUpdateWithoutPlacesInput, CircleUncheckedUpdateWithoutPlacesInput>
  }

  export type UserUpdateOneRequiredWithoutPlacesNestedInput = {
    create?: XOR<UserCreateWithoutPlacesInput, UserUncheckedCreateWithoutPlacesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlacesInput
    upsert?: UserUpsertWithoutPlacesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPlacesInput, UserUncheckedUpdateWithoutPlacesInput>
  }

  export type UserCreateNestedOneWithoutCircleInput = {
    create?: XOR<UserCreateWithoutCircleInput, UserUncheckedCreateWithoutCircleInput>
    connectOrCreate?: UserCreateOrConnectWithoutCircleInput
    connect?: UserWhereUniqueInput
  }

  export type CircleMembersCreateNestedManyWithoutCircleInput = {
    create?: XOR<Enumerable<CircleMembersCreateWithoutCircleInput>, Enumerable<CircleMembersUncheckedCreateWithoutCircleInput>>
    connectOrCreate?: Enumerable<CircleMembersCreateOrConnectWithoutCircleInput>
    createMany?: CircleMembersCreateManyCircleInputEnvelope
    connect?: Enumerable<CircleMembersWhereUniqueInput>
  }

  export type LocationCreateNestedManyWithoutCircleInput = {
    create?: XOR<Enumerable<LocationCreateWithoutCircleInput>, Enumerable<LocationUncheckedCreateWithoutCircleInput>>
    connectOrCreate?: Enumerable<LocationCreateOrConnectWithoutCircleInput>
    createMany?: LocationCreateManyCircleInputEnvelope
    connect?: Enumerable<LocationWhereUniqueInput>
  }

  export type PlacesCreateNestedManyWithoutCircleInput = {
    create?: XOR<Enumerable<PlacesCreateWithoutCircleInput>, Enumerable<PlacesUncheckedCreateWithoutCircleInput>>
    connectOrCreate?: Enumerable<PlacesCreateOrConnectWithoutCircleInput>
    createMany?: PlacesCreateManyCircleInputEnvelope
    connect?: Enumerable<PlacesWhereUniqueInput>
  }

  export type CircleMembersUncheckedCreateNestedManyWithoutCircleInput = {
    create?: XOR<Enumerable<CircleMembersCreateWithoutCircleInput>, Enumerable<CircleMembersUncheckedCreateWithoutCircleInput>>
    connectOrCreate?: Enumerable<CircleMembersCreateOrConnectWithoutCircleInput>
    createMany?: CircleMembersCreateManyCircleInputEnvelope
    connect?: Enumerable<CircleMembersWhereUniqueInput>
  }

  export type LocationUncheckedCreateNestedManyWithoutCircleInput = {
    create?: XOR<Enumerable<LocationCreateWithoutCircleInput>, Enumerable<LocationUncheckedCreateWithoutCircleInput>>
    connectOrCreate?: Enumerable<LocationCreateOrConnectWithoutCircleInput>
    createMany?: LocationCreateManyCircleInputEnvelope
    connect?: Enumerable<LocationWhereUniqueInput>
  }

  export type PlacesUncheckedCreateNestedManyWithoutCircleInput = {
    create?: XOR<Enumerable<PlacesCreateWithoutCircleInput>, Enumerable<PlacesUncheckedCreateWithoutCircleInput>>
    connectOrCreate?: Enumerable<PlacesCreateOrConnectWithoutCircleInput>
    createMany?: PlacesCreateManyCircleInputEnvelope
    connect?: Enumerable<PlacesWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutCircleNestedInput = {
    create?: XOR<UserCreateWithoutCircleInput, UserUncheckedCreateWithoutCircleInput>
    connectOrCreate?: UserCreateOrConnectWithoutCircleInput
    upsert?: UserUpsertWithoutCircleInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCircleInput, UserUncheckedUpdateWithoutCircleInput>
  }

  export type CircleMembersUpdateManyWithoutCircleNestedInput = {
    create?: XOR<Enumerable<CircleMembersCreateWithoutCircleInput>, Enumerable<CircleMembersUncheckedCreateWithoutCircleInput>>
    connectOrCreate?: Enumerable<CircleMembersCreateOrConnectWithoutCircleInput>
    upsert?: Enumerable<CircleMembersUpsertWithWhereUniqueWithoutCircleInput>
    createMany?: CircleMembersCreateManyCircleInputEnvelope
    set?: Enumerable<CircleMembersWhereUniqueInput>
    disconnect?: Enumerable<CircleMembersWhereUniqueInput>
    delete?: Enumerable<CircleMembersWhereUniqueInput>
    connect?: Enumerable<CircleMembersWhereUniqueInput>
    update?: Enumerable<CircleMembersUpdateWithWhereUniqueWithoutCircleInput>
    updateMany?: Enumerable<CircleMembersUpdateManyWithWhereWithoutCircleInput>
    deleteMany?: Enumerable<CircleMembersScalarWhereInput>
  }

  export type LocationUpdateManyWithoutCircleNestedInput = {
    create?: XOR<Enumerable<LocationCreateWithoutCircleInput>, Enumerable<LocationUncheckedCreateWithoutCircleInput>>
    connectOrCreate?: Enumerable<LocationCreateOrConnectWithoutCircleInput>
    upsert?: Enumerable<LocationUpsertWithWhereUniqueWithoutCircleInput>
    createMany?: LocationCreateManyCircleInputEnvelope
    set?: Enumerable<LocationWhereUniqueInput>
    disconnect?: Enumerable<LocationWhereUniqueInput>
    delete?: Enumerable<LocationWhereUniqueInput>
    connect?: Enumerable<LocationWhereUniqueInput>
    update?: Enumerable<LocationUpdateWithWhereUniqueWithoutCircleInput>
    updateMany?: Enumerable<LocationUpdateManyWithWhereWithoutCircleInput>
    deleteMany?: Enumerable<LocationScalarWhereInput>
  }

  export type PlacesUpdateManyWithoutCircleNestedInput = {
    create?: XOR<Enumerable<PlacesCreateWithoutCircleInput>, Enumerable<PlacesUncheckedCreateWithoutCircleInput>>
    connectOrCreate?: Enumerable<PlacesCreateOrConnectWithoutCircleInput>
    upsert?: Enumerable<PlacesUpsertWithWhereUniqueWithoutCircleInput>
    createMany?: PlacesCreateManyCircleInputEnvelope
    set?: Enumerable<PlacesWhereUniqueInput>
    disconnect?: Enumerable<PlacesWhereUniqueInput>
    delete?: Enumerable<PlacesWhereUniqueInput>
    connect?: Enumerable<PlacesWhereUniqueInput>
    update?: Enumerable<PlacesUpdateWithWhereUniqueWithoutCircleInput>
    updateMany?: Enumerable<PlacesUpdateManyWithWhereWithoutCircleInput>
    deleteMany?: Enumerable<PlacesScalarWhereInput>
  }

  export type CircleMembersUncheckedUpdateManyWithoutCircleNestedInput = {
    create?: XOR<Enumerable<CircleMembersCreateWithoutCircleInput>, Enumerable<CircleMembersUncheckedCreateWithoutCircleInput>>
    connectOrCreate?: Enumerable<CircleMembersCreateOrConnectWithoutCircleInput>
    upsert?: Enumerable<CircleMembersUpsertWithWhereUniqueWithoutCircleInput>
    createMany?: CircleMembersCreateManyCircleInputEnvelope
    set?: Enumerable<CircleMembersWhereUniqueInput>
    disconnect?: Enumerable<CircleMembersWhereUniqueInput>
    delete?: Enumerable<CircleMembersWhereUniqueInput>
    connect?: Enumerable<CircleMembersWhereUniqueInput>
    update?: Enumerable<CircleMembersUpdateWithWhereUniqueWithoutCircleInput>
    updateMany?: Enumerable<CircleMembersUpdateManyWithWhereWithoutCircleInput>
    deleteMany?: Enumerable<CircleMembersScalarWhereInput>
  }

  export type LocationUncheckedUpdateManyWithoutCircleNestedInput = {
    create?: XOR<Enumerable<LocationCreateWithoutCircleInput>, Enumerable<LocationUncheckedCreateWithoutCircleInput>>
    connectOrCreate?: Enumerable<LocationCreateOrConnectWithoutCircleInput>
    upsert?: Enumerable<LocationUpsertWithWhereUniqueWithoutCircleInput>
    createMany?: LocationCreateManyCircleInputEnvelope
    set?: Enumerable<LocationWhereUniqueInput>
    disconnect?: Enumerable<LocationWhereUniqueInput>
    delete?: Enumerable<LocationWhereUniqueInput>
    connect?: Enumerable<LocationWhereUniqueInput>
    update?: Enumerable<LocationUpdateWithWhereUniqueWithoutCircleInput>
    updateMany?: Enumerable<LocationUpdateManyWithWhereWithoutCircleInput>
    deleteMany?: Enumerable<LocationScalarWhereInput>
  }

  export type PlacesUncheckedUpdateManyWithoutCircleNestedInput = {
    create?: XOR<Enumerable<PlacesCreateWithoutCircleInput>, Enumerable<PlacesUncheckedCreateWithoutCircleInput>>
    connectOrCreate?: Enumerable<PlacesCreateOrConnectWithoutCircleInput>
    upsert?: Enumerable<PlacesUpsertWithWhereUniqueWithoutCircleInput>
    createMany?: PlacesCreateManyCircleInputEnvelope
    set?: Enumerable<PlacesWhereUniqueInput>
    disconnect?: Enumerable<PlacesWhereUniqueInput>
    delete?: Enumerable<PlacesWhereUniqueInput>
    connect?: Enumerable<PlacesWhereUniqueInput>
    update?: Enumerable<PlacesUpdateWithWhereUniqueWithoutCircleInput>
    updateMany?: Enumerable<PlacesUpdateManyWithWhereWithoutCircleInput>
    deleteMany?: Enumerable<PlacesScalarWhereInput>
  }

  export type CircleCreateNestedOneWithoutCircleMembersInput = {
    create?: XOR<CircleCreateWithoutCircleMembersInput, CircleUncheckedCreateWithoutCircleMembersInput>
    connectOrCreate?: CircleCreateOrConnectWithoutCircleMembersInput
    connect?: CircleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCircleMembersInput = {
    create?: XOR<UserCreateWithoutCircleMembersInput, UserUncheckedCreateWithoutCircleMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCircleMembersInput
    connect?: UserWhereUniqueInput
  }

  export type CircleUpdateOneRequiredWithoutCircleMembersNestedInput = {
    create?: XOR<CircleCreateWithoutCircleMembersInput, CircleUncheckedCreateWithoutCircleMembersInput>
    connectOrCreate?: CircleCreateOrConnectWithoutCircleMembersInput
    upsert?: CircleUpsertWithoutCircleMembersInput
    connect?: CircleWhereUniqueInput
    update?: XOR<CircleUpdateWithoutCircleMembersInput, CircleUncheckedUpdateWithoutCircleMembersInput>
  }

  export type UserUpdateOneRequiredWithoutCircleMembersNestedInput = {
    create?: XOR<UserCreateWithoutCircleMembersInput, UserUncheckedCreateWithoutCircleMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCircleMembersInput
    upsert?: UserUpsertWithoutCircleMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCircleMembersInput, UserUncheckedUpdateWithoutCircleMembersInput>
  }

  export type UserCreateNestedOneWithoutDevicesInput = {
    create?: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDevicesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDevicesNestedInput = {
    create?: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDevicesInput
    upsert?: UserUpsertWithoutDevicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutDevicesInput, UserUncheckedUpdateWithoutDevicesInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type CircleCreateWithoutCreatedUserInput = {
    id?: string
    circleCode: string
    codeExpiresAt?: Date | string
    title: string
    description?: string | null
    circleMembers?: CircleMembersCreateNestedManyWithoutCircleInput
    location?: LocationCreateNestedManyWithoutCircleInput
    places?: PlacesCreateNestedManyWithoutCircleInput
  }

  export type CircleUncheckedCreateWithoutCreatedUserInput = {
    id?: string
    circleCode: string
    codeExpiresAt?: Date | string
    title: string
    description?: string | null
    circleMembers?: CircleMembersUncheckedCreateNestedManyWithoutCircleInput
    location?: LocationUncheckedCreateNestedManyWithoutCircleInput
    places?: PlacesUncheckedCreateNestedManyWithoutCircleInput
  }

  export type CircleCreateOrConnectWithoutCreatedUserInput = {
    where: CircleWhereUniqueInput
    create: XOR<CircleCreateWithoutCreatedUserInput, CircleUncheckedCreateWithoutCreatedUserInput>
  }

  export type CircleCreateManyCreatedUserInputEnvelope = {
    data: Enumerable<CircleCreateManyCreatedUserInput>
    skipDuplicates?: boolean
  }

  export type CircleMembersCreateWithoutMemberInput = {
    id?: string
    role?: string | null
    circle: CircleCreateNestedOneWithoutCircleMembersInput
  }

  export type CircleMembersUncheckedCreateWithoutMemberInput = {
    id?: string
    circleId: string
    role?: string | null
  }

  export type CircleMembersCreateOrConnectWithoutMemberInput = {
    where: CircleMembersWhereUniqueInput
    create: XOR<CircleMembersCreateWithoutMemberInput, CircleMembersUncheckedCreateWithoutMemberInput>
  }

  export type CircleMembersCreateManyMemberInputEnvelope = {
    data: Enumerable<CircleMembersCreateManyMemberInput>
    skipDuplicates?: boolean
  }

  export type DevicesCreateWithoutUserInput = {
    id?: string
    device_type: string
    device_version: string
    app_version: string
  }

  export type DevicesUncheckedCreateWithoutUserInput = {
    id?: string
    device_type: string
    device_version: string
    app_version: string
  }

  export type DevicesCreateOrConnectWithoutUserInput = {
    where: DevicesWhereUniqueInput
    create: XOR<DevicesCreateWithoutUserInput, DevicesUncheckedCreateWithoutUserInput>
  }

  export type DevicesCreateManyUserInputEnvelope = {
    data: Enumerable<DevicesCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutUserInput = {
    id?: string
    latitude: number
    longitude: number
    circle: CircleCreateNestedOneWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutUserInput = {
    id?: string
    latitude: number
    longitude: number
    circleId: string
  }

  export type LocationCreateOrConnectWithoutUserInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutUserInput, LocationUncheckedCreateWithoutUserInput>
  }

  export type LocationCreateManyUserInputEnvelope = {
    data: Enumerable<LocationCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type PlacesCreateWithoutUserInput = {
    id?: string
    name: string
    latitude: number
    longitude: number
    circle: CircleCreateNestedOneWithoutPlacesInput
  }

  export type PlacesUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    latitude: number
    longitude: number
    circleId: string
  }

  export type PlacesCreateOrConnectWithoutUserInput = {
    where: PlacesWhereUniqueInput
    create: XOR<PlacesCreateWithoutUserInput, PlacesUncheckedCreateWithoutUserInput>
  }

  export type PlacesCreateManyUserInputEnvelope = {
    data: Enumerable<PlacesCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type CircleUpsertWithWhereUniqueWithoutCreatedUserInput = {
    where: CircleWhereUniqueInput
    update: XOR<CircleUpdateWithoutCreatedUserInput, CircleUncheckedUpdateWithoutCreatedUserInput>
    create: XOR<CircleCreateWithoutCreatedUserInput, CircleUncheckedCreateWithoutCreatedUserInput>
  }

  export type CircleUpdateWithWhereUniqueWithoutCreatedUserInput = {
    where: CircleWhereUniqueInput
    data: XOR<CircleUpdateWithoutCreatedUserInput, CircleUncheckedUpdateWithoutCreatedUserInput>
  }

  export type CircleUpdateManyWithWhereWithoutCreatedUserInput = {
    where: CircleScalarWhereInput
    data: XOR<CircleUpdateManyMutationInput, CircleUncheckedUpdateManyWithoutCircleInput>
  }

  export type CircleScalarWhereInput = {
    AND?: Enumerable<CircleScalarWhereInput>
    OR?: Enumerable<CircleScalarWhereInput>
    NOT?: Enumerable<CircleScalarWhereInput>
    id?: StringFilter | string
    circleCode?: StringFilter | string
    codeExpiresAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    createdUserId?: StringFilter | string
  }

  export type CircleMembersUpsertWithWhereUniqueWithoutMemberInput = {
    where: CircleMembersWhereUniqueInput
    update: XOR<CircleMembersUpdateWithoutMemberInput, CircleMembersUncheckedUpdateWithoutMemberInput>
    create: XOR<CircleMembersCreateWithoutMemberInput, CircleMembersUncheckedCreateWithoutMemberInput>
  }

  export type CircleMembersUpdateWithWhereUniqueWithoutMemberInput = {
    where: CircleMembersWhereUniqueInput
    data: XOR<CircleMembersUpdateWithoutMemberInput, CircleMembersUncheckedUpdateWithoutMemberInput>
  }

  export type CircleMembersUpdateManyWithWhereWithoutMemberInput = {
    where: CircleMembersScalarWhereInput
    data: XOR<CircleMembersUpdateManyMutationInput, CircleMembersUncheckedUpdateManyWithoutCircleMembersInput>
  }

  export type CircleMembersScalarWhereInput = {
    AND?: Enumerable<CircleMembersScalarWhereInput>
    OR?: Enumerable<CircleMembersScalarWhereInput>
    NOT?: Enumerable<CircleMembersScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    circleId?: StringFilter | string
    role?: StringNullableFilter | string | null
  }

  export type DevicesUpsertWithWhereUniqueWithoutUserInput = {
    where: DevicesWhereUniqueInput
    update: XOR<DevicesUpdateWithoutUserInput, DevicesUncheckedUpdateWithoutUserInput>
    create: XOR<DevicesCreateWithoutUserInput, DevicesUncheckedCreateWithoutUserInput>
  }

  export type DevicesUpdateWithWhereUniqueWithoutUserInput = {
    where: DevicesWhereUniqueInput
    data: XOR<DevicesUpdateWithoutUserInput, DevicesUncheckedUpdateWithoutUserInput>
  }

  export type DevicesUpdateManyWithWhereWithoutUserInput = {
    where: DevicesScalarWhereInput
    data: XOR<DevicesUpdateManyMutationInput, DevicesUncheckedUpdateManyWithoutDevicesInput>
  }

  export type DevicesScalarWhereInput = {
    AND?: Enumerable<DevicesScalarWhereInput>
    OR?: Enumerable<DevicesScalarWhereInput>
    NOT?: Enumerable<DevicesScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    device_type?: StringFilter | string
    device_version?: StringFilter | string
    app_version?: StringFilter | string
  }

  export type LocationUpsertWithWhereUniqueWithoutUserInput = {
    where: LocationWhereUniqueInput
    update: XOR<LocationUpdateWithoutUserInput, LocationUncheckedUpdateWithoutUserInput>
    create: XOR<LocationCreateWithoutUserInput, LocationUncheckedCreateWithoutUserInput>
  }

  export type LocationUpdateWithWhereUniqueWithoutUserInput = {
    where: LocationWhereUniqueInput
    data: XOR<LocationUpdateWithoutUserInput, LocationUncheckedUpdateWithoutUserInput>
  }

  export type LocationUpdateManyWithWhereWithoutUserInput = {
    where: LocationScalarWhereInput
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyWithoutLocationInput>
  }

  export type LocationScalarWhereInput = {
    AND?: Enumerable<LocationScalarWhereInput>
    OR?: Enumerable<LocationScalarWhereInput>
    NOT?: Enumerable<LocationScalarWhereInput>
    id?: StringFilter | string
    latitude?: FloatFilter | number
    longitude?: FloatFilter | number
    userId?: StringFilter | string
    circleId?: StringFilter | string
  }

  export type PlacesUpsertWithWhereUniqueWithoutUserInput = {
    where: PlacesWhereUniqueInput
    update: XOR<PlacesUpdateWithoutUserInput, PlacesUncheckedUpdateWithoutUserInput>
    create: XOR<PlacesCreateWithoutUserInput, PlacesUncheckedCreateWithoutUserInput>
  }

  export type PlacesUpdateWithWhereUniqueWithoutUserInput = {
    where: PlacesWhereUniqueInput
    data: XOR<PlacesUpdateWithoutUserInput, PlacesUncheckedUpdateWithoutUserInput>
  }

  export type PlacesUpdateManyWithWhereWithoutUserInput = {
    where: PlacesScalarWhereInput
    data: XOR<PlacesUpdateManyMutationInput, PlacesUncheckedUpdateManyWithoutPlacesInput>
  }

  export type PlacesScalarWhereInput = {
    AND?: Enumerable<PlacesScalarWhereInput>
    OR?: Enumerable<PlacesScalarWhereInput>
    NOT?: Enumerable<PlacesScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    latitude?: FloatFilter | number
    longitude?: FloatFilter | number
    userId?: StringFilter | string
    circleId?: StringFilter | string
  }

  export type CircleCreateWithoutLocationInput = {
    id?: string
    circleCode: string
    codeExpiresAt?: Date | string
    title: string
    description?: string | null
    createdUser: UserCreateNestedOneWithoutCircleInput
    circleMembers?: CircleMembersCreateNestedManyWithoutCircleInput
    places?: PlacesCreateNestedManyWithoutCircleInput
  }

  export type CircleUncheckedCreateWithoutLocationInput = {
    id?: string
    circleCode: string
    codeExpiresAt?: Date | string
    title: string
    description?: string | null
    createdUserId: string
    circleMembers?: CircleMembersUncheckedCreateNestedManyWithoutCircleInput
    places?: PlacesUncheckedCreateNestedManyWithoutCircleInput
  }

  export type CircleCreateOrConnectWithoutLocationInput = {
    where: CircleWhereUniqueInput
    create: XOR<CircleCreateWithoutLocationInput, CircleUncheckedCreateWithoutLocationInput>
  }

  export type UserCreateWithoutLocationInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
    circle?: CircleCreateNestedManyWithoutCreatedUserInput
    circleMembers?: CircleMembersCreateNestedManyWithoutMemberInput
    devices?: DevicesCreateNestedManyWithoutUserInput
    places?: PlacesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLocationInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
    circle?: CircleUncheckedCreateNestedManyWithoutCreatedUserInput
    circleMembers?: CircleMembersUncheckedCreateNestedManyWithoutMemberInput
    devices?: DevicesUncheckedCreateNestedManyWithoutUserInput
    places?: PlacesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLocationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput>
  }

  export type CircleUpsertWithoutLocationInput = {
    update: XOR<CircleUpdateWithoutLocationInput, CircleUncheckedUpdateWithoutLocationInput>
    create: XOR<CircleCreateWithoutLocationInput, CircleUncheckedCreateWithoutLocationInput>
  }

  export type CircleUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdUser?: UserUpdateOneRequiredWithoutCircleNestedInput
    circleMembers?: CircleMembersUpdateManyWithoutCircleNestedInput
    places?: PlacesUpdateManyWithoutCircleNestedInput
  }

  export type CircleUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdUserId?: StringFieldUpdateOperationsInput | string
    circleMembers?: CircleMembersUncheckedUpdateManyWithoutCircleNestedInput
    places?: PlacesUncheckedUpdateManyWithoutCircleNestedInput
  }

  export type UserUpsertWithoutLocationInput = {
    update: XOR<UserUpdateWithoutLocationInput, UserUncheckedUpdateWithoutLocationInput>
    create: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput>
  }

  export type UserUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    circle?: CircleUpdateManyWithoutCreatedUserNestedInput
    circleMembers?: CircleMembersUpdateManyWithoutMemberNestedInput
    devices?: DevicesUpdateManyWithoutUserNestedInput
    places?: PlacesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    circle?: CircleUncheckedUpdateManyWithoutCreatedUserNestedInput
    circleMembers?: CircleMembersUncheckedUpdateManyWithoutMemberNestedInput
    devices?: DevicesUncheckedUpdateManyWithoutUserNestedInput
    places?: PlacesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CircleCreateWithoutPlacesInput = {
    id?: string
    circleCode: string
    codeExpiresAt?: Date | string
    title: string
    description?: string | null
    createdUser: UserCreateNestedOneWithoutCircleInput
    circleMembers?: CircleMembersCreateNestedManyWithoutCircleInput
    location?: LocationCreateNestedManyWithoutCircleInput
  }

  export type CircleUncheckedCreateWithoutPlacesInput = {
    id?: string
    circleCode: string
    codeExpiresAt?: Date | string
    title: string
    description?: string | null
    createdUserId: string
    circleMembers?: CircleMembersUncheckedCreateNestedManyWithoutCircleInput
    location?: LocationUncheckedCreateNestedManyWithoutCircleInput
  }

  export type CircleCreateOrConnectWithoutPlacesInput = {
    where: CircleWhereUniqueInput
    create: XOR<CircleCreateWithoutPlacesInput, CircleUncheckedCreateWithoutPlacesInput>
  }

  export type UserCreateWithoutPlacesInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
    circle?: CircleCreateNestedManyWithoutCreatedUserInput
    circleMembers?: CircleMembersCreateNestedManyWithoutMemberInput
    devices?: DevicesCreateNestedManyWithoutUserInput
    location?: LocationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPlacesInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
    circle?: CircleUncheckedCreateNestedManyWithoutCreatedUserInput
    circleMembers?: CircleMembersUncheckedCreateNestedManyWithoutMemberInput
    devices?: DevicesUncheckedCreateNestedManyWithoutUserInput
    location?: LocationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPlacesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlacesInput, UserUncheckedCreateWithoutPlacesInput>
  }

  export type CircleUpsertWithoutPlacesInput = {
    update: XOR<CircleUpdateWithoutPlacesInput, CircleUncheckedUpdateWithoutPlacesInput>
    create: XOR<CircleCreateWithoutPlacesInput, CircleUncheckedCreateWithoutPlacesInput>
  }

  export type CircleUpdateWithoutPlacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdUser?: UserUpdateOneRequiredWithoutCircleNestedInput
    circleMembers?: CircleMembersUpdateManyWithoutCircleNestedInput
    location?: LocationUpdateManyWithoutCircleNestedInput
  }

  export type CircleUncheckedUpdateWithoutPlacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdUserId?: StringFieldUpdateOperationsInput | string
    circleMembers?: CircleMembersUncheckedUpdateManyWithoutCircleNestedInput
    location?: LocationUncheckedUpdateManyWithoutCircleNestedInput
  }

  export type UserUpsertWithoutPlacesInput = {
    update: XOR<UserUpdateWithoutPlacesInput, UserUncheckedUpdateWithoutPlacesInput>
    create: XOR<UserCreateWithoutPlacesInput, UserUncheckedCreateWithoutPlacesInput>
  }

  export type UserUpdateWithoutPlacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    circle?: CircleUpdateManyWithoutCreatedUserNestedInput
    circleMembers?: CircleMembersUpdateManyWithoutMemberNestedInput
    devices?: DevicesUpdateManyWithoutUserNestedInput
    location?: LocationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPlacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    circle?: CircleUncheckedUpdateManyWithoutCreatedUserNestedInput
    circleMembers?: CircleMembersUncheckedUpdateManyWithoutMemberNestedInput
    devices?: DevicesUncheckedUpdateManyWithoutUserNestedInput
    location?: LocationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCircleInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
    circleMembers?: CircleMembersCreateNestedManyWithoutMemberInput
    devices?: DevicesCreateNestedManyWithoutUserInput
    location?: LocationCreateNestedManyWithoutUserInput
    places?: PlacesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCircleInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
    circleMembers?: CircleMembersUncheckedCreateNestedManyWithoutMemberInput
    devices?: DevicesUncheckedCreateNestedManyWithoutUserInput
    location?: LocationUncheckedCreateNestedManyWithoutUserInput
    places?: PlacesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCircleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCircleInput, UserUncheckedCreateWithoutCircleInput>
  }

  export type CircleMembersCreateWithoutCircleInput = {
    id?: string
    role?: string | null
    member: UserCreateNestedOneWithoutCircleMembersInput
  }

  export type CircleMembersUncheckedCreateWithoutCircleInput = {
    id?: string
    userId: string
    role?: string | null
  }

  export type CircleMembersCreateOrConnectWithoutCircleInput = {
    where: CircleMembersWhereUniqueInput
    create: XOR<CircleMembersCreateWithoutCircleInput, CircleMembersUncheckedCreateWithoutCircleInput>
  }

  export type CircleMembersCreateManyCircleInputEnvelope = {
    data: Enumerable<CircleMembersCreateManyCircleInput>
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutCircleInput = {
    id?: string
    latitude: number
    longitude: number
    user: UserCreateNestedOneWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutCircleInput = {
    id?: string
    latitude: number
    longitude: number
    userId: string
  }

  export type LocationCreateOrConnectWithoutCircleInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutCircleInput, LocationUncheckedCreateWithoutCircleInput>
  }

  export type LocationCreateManyCircleInputEnvelope = {
    data: Enumerable<LocationCreateManyCircleInput>
    skipDuplicates?: boolean
  }

  export type PlacesCreateWithoutCircleInput = {
    id?: string
    name: string
    latitude: number
    longitude: number
    user: UserCreateNestedOneWithoutPlacesInput
  }

  export type PlacesUncheckedCreateWithoutCircleInput = {
    id?: string
    name: string
    latitude: number
    longitude: number
    userId: string
  }

  export type PlacesCreateOrConnectWithoutCircleInput = {
    where: PlacesWhereUniqueInput
    create: XOR<PlacesCreateWithoutCircleInput, PlacesUncheckedCreateWithoutCircleInput>
  }

  export type PlacesCreateManyCircleInputEnvelope = {
    data: Enumerable<PlacesCreateManyCircleInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCircleInput = {
    update: XOR<UserUpdateWithoutCircleInput, UserUncheckedUpdateWithoutCircleInput>
    create: XOR<UserCreateWithoutCircleInput, UserUncheckedCreateWithoutCircleInput>
  }

  export type UserUpdateWithoutCircleInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    circleMembers?: CircleMembersUpdateManyWithoutMemberNestedInput
    devices?: DevicesUpdateManyWithoutUserNestedInput
    location?: LocationUpdateManyWithoutUserNestedInput
    places?: PlacesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCircleInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    circleMembers?: CircleMembersUncheckedUpdateManyWithoutMemberNestedInput
    devices?: DevicesUncheckedUpdateManyWithoutUserNestedInput
    location?: LocationUncheckedUpdateManyWithoutUserNestedInput
    places?: PlacesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CircleMembersUpsertWithWhereUniqueWithoutCircleInput = {
    where: CircleMembersWhereUniqueInput
    update: XOR<CircleMembersUpdateWithoutCircleInput, CircleMembersUncheckedUpdateWithoutCircleInput>
    create: XOR<CircleMembersCreateWithoutCircleInput, CircleMembersUncheckedCreateWithoutCircleInput>
  }

  export type CircleMembersUpdateWithWhereUniqueWithoutCircleInput = {
    where: CircleMembersWhereUniqueInput
    data: XOR<CircleMembersUpdateWithoutCircleInput, CircleMembersUncheckedUpdateWithoutCircleInput>
  }

  export type CircleMembersUpdateManyWithWhereWithoutCircleInput = {
    where: CircleMembersScalarWhereInput
    data: XOR<CircleMembersUpdateManyMutationInput, CircleMembersUncheckedUpdateManyWithoutCircleMembersInput>
  }

  export type LocationUpsertWithWhereUniqueWithoutCircleInput = {
    where: LocationWhereUniqueInput
    update: XOR<LocationUpdateWithoutCircleInput, LocationUncheckedUpdateWithoutCircleInput>
    create: XOR<LocationCreateWithoutCircleInput, LocationUncheckedCreateWithoutCircleInput>
  }

  export type LocationUpdateWithWhereUniqueWithoutCircleInput = {
    where: LocationWhereUniqueInput
    data: XOR<LocationUpdateWithoutCircleInput, LocationUncheckedUpdateWithoutCircleInput>
  }

  export type LocationUpdateManyWithWhereWithoutCircleInput = {
    where: LocationScalarWhereInput
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyWithoutLocationInput>
  }

  export type PlacesUpsertWithWhereUniqueWithoutCircleInput = {
    where: PlacesWhereUniqueInput
    update: XOR<PlacesUpdateWithoutCircleInput, PlacesUncheckedUpdateWithoutCircleInput>
    create: XOR<PlacesCreateWithoutCircleInput, PlacesUncheckedCreateWithoutCircleInput>
  }

  export type PlacesUpdateWithWhereUniqueWithoutCircleInput = {
    where: PlacesWhereUniqueInput
    data: XOR<PlacesUpdateWithoutCircleInput, PlacesUncheckedUpdateWithoutCircleInput>
  }

  export type PlacesUpdateManyWithWhereWithoutCircleInput = {
    where: PlacesScalarWhereInput
    data: XOR<PlacesUpdateManyMutationInput, PlacesUncheckedUpdateManyWithoutPlacesInput>
  }

  export type CircleCreateWithoutCircleMembersInput = {
    id?: string
    circleCode: string
    codeExpiresAt?: Date | string
    title: string
    description?: string | null
    createdUser: UserCreateNestedOneWithoutCircleInput
    location?: LocationCreateNestedManyWithoutCircleInput
    places?: PlacesCreateNestedManyWithoutCircleInput
  }

  export type CircleUncheckedCreateWithoutCircleMembersInput = {
    id?: string
    circleCode: string
    codeExpiresAt?: Date | string
    title: string
    description?: string | null
    createdUserId: string
    location?: LocationUncheckedCreateNestedManyWithoutCircleInput
    places?: PlacesUncheckedCreateNestedManyWithoutCircleInput
  }

  export type CircleCreateOrConnectWithoutCircleMembersInput = {
    where: CircleWhereUniqueInput
    create: XOR<CircleCreateWithoutCircleMembersInput, CircleUncheckedCreateWithoutCircleMembersInput>
  }

  export type UserCreateWithoutCircleMembersInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
    circle?: CircleCreateNestedManyWithoutCreatedUserInput
    devices?: DevicesCreateNestedManyWithoutUserInput
    location?: LocationCreateNestedManyWithoutUserInput
    places?: PlacesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCircleMembersInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
    circle?: CircleUncheckedCreateNestedManyWithoutCreatedUserInput
    devices?: DevicesUncheckedCreateNestedManyWithoutUserInput
    location?: LocationUncheckedCreateNestedManyWithoutUserInput
    places?: PlacesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCircleMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCircleMembersInput, UserUncheckedCreateWithoutCircleMembersInput>
  }

  export type CircleUpsertWithoutCircleMembersInput = {
    update: XOR<CircleUpdateWithoutCircleMembersInput, CircleUncheckedUpdateWithoutCircleMembersInput>
    create: XOR<CircleCreateWithoutCircleMembersInput, CircleUncheckedCreateWithoutCircleMembersInput>
  }

  export type CircleUpdateWithoutCircleMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdUser?: UserUpdateOneRequiredWithoutCircleNestedInput
    location?: LocationUpdateManyWithoutCircleNestedInput
    places?: PlacesUpdateManyWithoutCircleNestedInput
  }

  export type CircleUncheckedUpdateWithoutCircleMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdUserId?: StringFieldUpdateOperationsInput | string
    location?: LocationUncheckedUpdateManyWithoutCircleNestedInput
    places?: PlacesUncheckedUpdateManyWithoutCircleNestedInput
  }

  export type UserUpsertWithoutCircleMembersInput = {
    update: XOR<UserUpdateWithoutCircleMembersInput, UserUncheckedUpdateWithoutCircleMembersInput>
    create: XOR<UserCreateWithoutCircleMembersInput, UserUncheckedCreateWithoutCircleMembersInput>
  }

  export type UserUpdateWithoutCircleMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    circle?: CircleUpdateManyWithoutCreatedUserNestedInput
    devices?: DevicesUpdateManyWithoutUserNestedInput
    location?: LocationUpdateManyWithoutUserNestedInput
    places?: PlacesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCircleMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    circle?: CircleUncheckedUpdateManyWithoutCreatedUserNestedInput
    devices?: DevicesUncheckedUpdateManyWithoutUserNestedInput
    location?: LocationUncheckedUpdateManyWithoutUserNestedInput
    places?: PlacesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDevicesInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
    circle?: CircleCreateNestedManyWithoutCreatedUserInput
    circleMembers?: CircleMembersCreateNestedManyWithoutMemberInput
    location?: LocationCreateNestedManyWithoutUserInput
    places?: PlacesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDevicesInput = {
    id?: string
    mobileNo: string
    firstName: string
    lastName: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastSeen?: Date | string
    circle?: CircleUncheckedCreateNestedManyWithoutCreatedUserInput
    circleMembers?: CircleMembersUncheckedCreateNestedManyWithoutMemberInput
    location?: LocationUncheckedCreateNestedManyWithoutUserInput
    places?: PlacesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDevicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
  }

  export type UserUpsertWithoutDevicesInput = {
    update: XOR<UserUpdateWithoutDevicesInput, UserUncheckedUpdateWithoutDevicesInput>
    create: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
  }

  export type UserUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    circle?: CircleUpdateManyWithoutCreatedUserNestedInput
    circleMembers?: CircleMembersUpdateManyWithoutMemberNestedInput
    location?: LocationUpdateManyWithoutUserNestedInput
    places?: PlacesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    mobileNo?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    circle?: CircleUncheckedUpdateManyWithoutCreatedUserNestedInput
    circleMembers?: CircleMembersUncheckedUpdateManyWithoutMemberNestedInput
    location?: LocationUncheckedUpdateManyWithoutUserNestedInput
    places?: PlacesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CircleCreateManyCreatedUserInput = {
    id?: string
    circleCode: string
    codeExpiresAt?: Date | string
    title: string
    description?: string | null
  }

  export type CircleMembersCreateManyMemberInput = {
    id?: string
    circleId: string
    role?: string | null
  }

  export type DevicesCreateManyUserInput = {
    id?: string
    device_type: string
    device_version: string
    app_version: string
  }

  export type LocationCreateManyUserInput = {
    id?: string
    latitude: number
    longitude: number
    circleId: string
  }

  export type PlacesCreateManyUserInput = {
    id?: string
    name: string
    latitude: number
    longitude: number
    circleId: string
  }

  export type CircleUpdateWithoutCreatedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    circleMembers?: CircleMembersUpdateManyWithoutCircleNestedInput
    location?: LocationUpdateManyWithoutCircleNestedInput
    places?: PlacesUpdateManyWithoutCircleNestedInput
  }

  export type CircleUncheckedUpdateWithoutCreatedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    circleMembers?: CircleMembersUncheckedUpdateManyWithoutCircleNestedInput
    location?: LocationUncheckedUpdateManyWithoutCircleNestedInput
    places?: PlacesUncheckedUpdateManyWithoutCircleNestedInput
  }

  export type CircleUncheckedUpdateManyWithoutCircleInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleCode?: StringFieldUpdateOperationsInput | string
    codeExpiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CircleMembersUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    circle?: CircleUpdateOneRequiredWithoutCircleMembersNestedInput
  }

  export type CircleMembersUncheckedUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CircleMembersUncheckedUpdateManyWithoutCircleMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    circleId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DevicesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    device_type?: StringFieldUpdateOperationsInput | string
    device_version?: StringFieldUpdateOperationsInput | string
    app_version?: StringFieldUpdateOperationsInput | string
  }

  export type DevicesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    device_type?: StringFieldUpdateOperationsInput | string
    device_version?: StringFieldUpdateOperationsInput | string
    app_version?: StringFieldUpdateOperationsInput | string
  }

  export type DevicesUncheckedUpdateManyWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    device_type?: StringFieldUpdateOperationsInput | string
    device_version?: StringFieldUpdateOperationsInput | string
    app_version?: StringFieldUpdateOperationsInput | string
  }

  export type LocationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    circle?: CircleUpdateOneRequiredWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    circleId?: StringFieldUpdateOperationsInput | string
  }

  export type LocationUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    circleId?: StringFieldUpdateOperationsInput | string
  }

  export type PlacesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    circle?: CircleUpdateOneRequiredWithoutPlacesNestedInput
  }

  export type PlacesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    circleId?: StringFieldUpdateOperationsInput | string
  }

  export type PlacesUncheckedUpdateManyWithoutPlacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    circleId?: StringFieldUpdateOperationsInput | string
  }

  export type CircleMembersCreateManyCircleInput = {
    id?: string
    userId: string
    role?: string | null
  }

  export type LocationCreateManyCircleInput = {
    id?: string
    latitude: number
    longitude: number
    userId: string
  }

  export type PlacesCreateManyCircleInput = {
    id?: string
    name: string
    latitude: number
    longitude: number
    userId: string
  }

  export type CircleMembersUpdateWithoutCircleInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    member?: UserUpdateOneRequiredWithoutCircleMembersNestedInput
  }

  export type CircleMembersUncheckedUpdateWithoutCircleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LocationUpdateWithoutCircleInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutCircleInput = {
    id?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PlacesUpdateWithoutCircleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutPlacesNestedInput
  }

  export type PlacesUncheckedUpdateWithoutCircleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}