// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @unique @default(uuid())
  mobileNo           String
  firstName           String
  lastName           String
  email              String          @unique
  hashedPassword     String
  hashedRefreshToken String?
  location           Location[]
  circle             Circle[]
  circleMembers      CircleMembers[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  lastSeen           DateTime        @default(now())
  places             Places[]
  devices            Devices[]

  @@map("users")
}

model Location {
  id        String @unique @default(uuid())
  latitude  Float
  longitude Float
  userId    String
  user      User?  @relation(fields: [userId], references: [id])
  circleId String
  circle    Circle? @relation(fields: [circleId], references: [id])
}

model Places {
  id        String  @unique @default(uuid())
  name      String
  latitude  Float
  longitude Float
  userId    String
  user      User?   @relation(fields: [userId], references: [id])
  circleId  String
  circle    Circle? @relation(fields: [circleId], references: [id])
}

model Circle {
  id            String          @unique @default(uuid())
  circleCode    String
  codeExpiresAt DateTime        @default(dbgenerated("now() + interval '3 days'"))
  title         String
  description   String?
  createdUserId String
  createdUser   User            @relation(fields: [createdUserId], references: [id])
  circleMembers CircleMembers[]
  places        Places[]
  location      Location[]
}

model CircleMembers {
  id       String     @unique @default(uuid())
  userId   String
  member   User       @relation(fields: [userId], references: [id])
  circleId String
  circle   Circle @relation(fields: [circleId], references: [id])
  role     String?

  @@unique([userId, circleId], name: "userId_circleId")
}


model Devices {
  id String @unique @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  device_type String
  device_version String
  app_version String
}
